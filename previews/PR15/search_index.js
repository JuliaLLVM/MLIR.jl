var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Types-and-constants","page":"API","title":"Types and constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [MLIR.API]\nOrder = [:type, :constant]","category":"page"},{"location":"api/#Functions-and-macros","page":"API","title":"Functions and macros","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [MLIR.API]\nOrder = [:macro, :function]","category":"page"},{"location":"api/#Documentation","page":"API","title":"Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [MLIR.API]\nOrder = [:module, :type, :constant, :macro, :function]","category":"page"},{"location":"api/#MLIR.API.MlirAttribute","page":"API","title":"MLIR.API.MlirAttribute","text":"MlirAttribute\n\n\n\n\n\n","category":"type"},{"location":"api/#MLIR.API.MlirDiagnostic","page":"API","title":"MLIR.API.MlirDiagnostic","text":"MlirDiagnostic\n\nAn opaque reference to a diagnostic, always owned by the diagnostics engine (context). Must not be stored outside of the diagnostic handler.\n\n\n\n\n\n","category":"type"},{"location":"api/#MLIR.API.MlirDiagnosticHandler","page":"API","title":"MLIR.API.MlirDiagnosticHandler","text":"Diagnostic handler type. Accepts a reference to a diagnostic, which is only guaranteed to be live during the call. The handler is passed the userData that was provided when the handler was attached to a context. If the handler processed the diagnostic completely, it is expected to return success. Otherwise, it is expected to return failure to indicate that other handlers should attempt to process the diagnostic.\n\n\n\n\n\n","category":"type"},{"location":"api/#MLIR.API.MlirDiagnosticHandlerID","page":"API","title":"MLIR.API.MlirDiagnosticHandlerID","text":"Opaque identifier of a diagnostic handler, useful to detach a handler.\n\n\n\n\n\n","category":"type"},{"location":"api/#MLIR.API.MlirDiagnosticSeverity","page":"API","title":"MLIR.API.MlirDiagnosticSeverity","text":"MlirDiagnosticSeverity\n\nSeverity of a diagnostic.\n\n\n\n\n\n","category":"type"},{"location":"api/#MLIR.API.MlirLogicalResult","page":"API","title":"MLIR.API.MlirLogicalResult","text":"MlirLogicalResult\n\nA logical result value, essentially a boolean with named states. LLVM convention for using boolean values to designate success or failure of an operation is a moving target, so MLIR opted for an explicit class. Instances of MlirLogicalResult must only be inspected using the associated functions.\n\n\n\n\n\n","category":"type"},{"location":"api/#MLIR.API.MlirNamedAttribute","page":"API","title":"MLIR.API.MlirNamedAttribute","text":"MlirNamedAttribute\n\nNamed MLIR attribute.\n\nA named attribute is essentially a (name, attribute) pair where the name is a string.\n\n\n\n\n\n","category":"type"},{"location":"api/#MLIR.API.MlirOperationState","page":"API","title":"MLIR.API.MlirOperationState","text":"MlirOperationState\n\nAn auxiliary class for constructing operations.\n\nThis class contains all the information necessary to construct the operation. It owns the MlirRegions it has pointers to and does not own anything else. By default, the state can be constructed from a name and location, the latter being also used to access the context, and has no other components. These components can be added progressively until the operation is constructed. Users are not expected to rely on the internals of this class and should use mlirOperationState* functions instead.\n\n\n\n\n\n","category":"type"},{"location":"api/#MLIR.API.MlirSparseTensorDimLevelType","page":"API","title":"MLIR.API.MlirSparseTensorDimLevelType","text":"MlirSparseTensorDimLevelType\n\nDimension level types that define sparse tensors: - MLIR_SPARSE_TENSOR_DIM_LEVEL_DENSE - dimension is dense, every entry is stored - MLIR_SPARSE_TENSOR_DIM_LEVEL_COMPRESSED - dimension is sparse, only nonzeros are stored. - MLIR_SPARSE_TENSOR_DIM_LEVEL_SINGLETON - dimension contains single coordinate, no siblings.\n\nThese correspond to SparseTensorEncodingAttr::DimLevelType in the C++ API. If updating, keep them in sync and update the static_assert in the impl file.\n\n\n\n\n\n","category":"type"},{"location":"api/#MLIR.API.MlirStringCallback","page":"API","title":"MLIR.API.MlirStringCallback","text":"A callback for returning string references.\n\nThis function is called back by the functions that need to return a reference to the portion of the string with the following arguments: - an MlirStringRef representing the current portion of the string - a pointer to user data forwarded from the printing call.\n\n\n\n\n\n","category":"type"},{"location":"api/#MLIR.API.MlirStringRef","page":"API","title":"MLIR.API.MlirStringRef","text":"MlirStringRef\n\nA pointer to a sized fragment of a string, not necessarily null-terminated. Does not own the underlying string. This is equivalent to llvm::StringRef.\n\nField Note\ndata Pointer to the first symbol.\nlength Length of the fragment.\n\n\n\n\n\n","category":"type"},{"location":"api/#MLIR.API.MlirType","page":"API","title":"MLIR.API.MlirType","text":"MlirType\n\n\n\n\n\n","category":"type"},{"location":"api/#MLIR.API.MlirTypesCallback","page":"API","title":"MLIR.API.MlirTypesCallback","text":"These callbacks are used to return multiple types from functions while transferring ownership to the caller. The first argument is the number of consecutive elements pointed to by the second argument. The third argument is an opaque pointer forwarded to the callback by the caller.\n\n\n\n\n\n","category":"type"},{"location":"api/#MLIR.API.mlirAffineAddExprGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAffineAddExprGet","text":"mlirAffineAddExprGet(lhs, rhs)\n\nCreates an affine add expression with 'lhs' and 'rhs'.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineBinaryOpExprGetLHS-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineBinaryOpExprGetLHS","text":"mlirAffineBinaryOpExprGetLHS(affineExpr)\n\nReturns the left hand side affine expression of the given affine binary operation expression.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineBinaryOpExprGetRHS-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineBinaryOpExprGetRHS","text":"mlirAffineBinaryOpExprGetRHS(affineExpr)\n\nReturns the right hand side affine expression of the given affine binary operation expression.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineCeilDivExprGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAffineCeilDivExprGet","text":"mlirAffineCeilDivExprGet(lhs, rhs)\n\nCreates an affine ceildiv expression with 'lhs' and 'rhs'.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineConstantExprGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAffineConstantExprGet","text":"mlirAffineConstantExprGet(ctx, constant)\n\nCreates an affine constant expression with 'constant' in the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineConstantExprGetValue-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineConstantExprGetValue","text":"mlirAffineConstantExprGetValue(affineExpr)\n\nReturns the value of the given affine constant expression.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineDimExprGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAffineDimExprGet","text":"mlirAffineDimExprGet(ctx, position)\n\nCreates an affine dimension expression with 'position' in the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineDimExprGetPosition-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineDimExprGetPosition","text":"mlirAffineDimExprGetPosition(affineExpr)\n\nReturns the position of the given affine dimension expression.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprCompose-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAffineExprCompose","text":"mlirAffineExprCompose(affineExpr, affineMap)\n\nComposes the given map with the given expression.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprDump-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineExprDump","text":"mlirAffineExprDump(affineExpr)\n\nPrints the affine expression to the standard error stream.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprEqual-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAffineExprEqual","text":"mlirAffineExprEqual(lhs, rhs)\n\nReturns true if the two affine expressions are equal.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprGetContext-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineExprGetContext","text":"mlirAffineExprGetContext(affineExpr)\n\nGets the context that owns the affine expression.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprGetLargestKnownDivisor-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineExprGetLargestKnownDivisor","text":"mlirAffineExprGetLargestKnownDivisor(affineExpr)\n\nReturns the greatest known integral divisor of this affine expression. The result is always positive.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprIsAAdd-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineExprIsAAdd","text":"mlirAffineExprIsAAdd(affineExpr)\n\nChecks whether the given affine expression is an add expression.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprIsABinary-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineExprIsABinary","text":"mlirAffineExprIsABinary(affineExpr)\n\nChecks whether the given affine expression is binary.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprIsACeilDiv-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineExprIsACeilDiv","text":"mlirAffineExprIsACeilDiv(affineExpr)\n\nChecks whether the given affine expression is an ceildiv expression.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprIsAConstant-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineExprIsAConstant","text":"mlirAffineExprIsAConstant(affineExpr)\n\nChecks whether the given affine expression is a constant expression.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprIsADim-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineExprIsADim","text":"mlirAffineExprIsADim(affineExpr)\n\nChecks whether the given affine expression is a dimension expression.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprIsAFloorDiv-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineExprIsAFloorDiv","text":"mlirAffineExprIsAFloorDiv(affineExpr)\n\nChecks whether the given affine expression is an floordiv expression.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprIsAMod-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineExprIsAMod","text":"mlirAffineExprIsAMod(affineExpr)\n\nChecks whether the given affine expression is an mod expression.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprIsAMul-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineExprIsAMul","text":"mlirAffineExprIsAMul(affineExpr)\n\nChecks whether the given affine expression is an mul expression.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprIsASymbol-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineExprIsASymbol","text":"mlirAffineExprIsASymbol(affineExpr)\n\nChecks whether the given affine expression is a symbol expression.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprIsFunctionOfDim-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAffineExprIsFunctionOfDim","text":"mlirAffineExprIsFunctionOfDim(affineExpr, position)\n\nChecks whether the given affine expression involves AffineDimExpr 'position'.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprIsMultipleOf-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAffineExprIsMultipleOf","text":"mlirAffineExprIsMultipleOf(affineExpr, factor)\n\nChecks whether the given affine expression is a multiple of 'factor'.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprIsNull-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineExprIsNull","text":"mlirAffineExprIsNull(affineExpr)\n\nReturns true if the given affine expression is a null expression. Note constant zero is not a null expression.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprIsPureAffine-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineExprIsPureAffine","text":"mlirAffineExprIsPureAffine(affineExpr)\n\nChecks whether the given affine expression is a pure affine expression, i.e. mul, floordiv, ceildic, and mod is only allowed w.r.t constants.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprIsSymbolicOrConstant-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineExprIsSymbolicOrConstant","text":"mlirAffineExprIsSymbolicOrConstant(affineExpr)\n\nChecks whether the given affine expression is made out of only symbols and constants.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineExprPrint-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirAffineExprPrint","text":"mlirAffineExprPrint(affineExpr, callback, userData)\n\nPrints an affine expression by sending chunks of the string representation and forwarding userData tocallback`. Note that the callback may be called several times with consecutive chunks of the string.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineFloorDivExprGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAffineFloorDivExprGet","text":"mlirAffineFloorDivExprGet(lhs, rhs)\n\nCreates an affine floordiv expression with 'lhs' and 'rhs'.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapAttrGet-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineMapAttrGet","text":"mlirAffineMapAttrGet(map)\n\nCreates an affine map attribute wrapping the given map. The attribute belongs to the same context as the affine map.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapAttrGetValue-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineMapAttrGetValue","text":"mlirAffineMapAttrGetValue(attr)\n\nReturns the affine map wrapped in the given affine map attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapCompressUnusedSymbols-NTuple{4, Any}","page":"API","title":"MLIR.API.mlirAffineMapCompressUnusedSymbols","text":"mlirAffineMapCompressUnusedSymbols(affineMaps, size, result, populateResult)\n\nReturns the simplified affine map resulting from dropping the symbols that do not appear in any of the individual maps in affineMaps. Asserts that all maps in affineMaps are normalized to the same number of dims and symbols. Takes a callback populateResult to fill the res container with value m at entry idx. This allows returning without worrying about ownership considerations.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapConstantGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAffineMapConstantGet","text":"mlirAffineMapConstantGet(ctx, val)\n\nCreates a single constant result affine map in the context. The affine map is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapDump-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineMapDump","text":"mlirAffineMapDump(affineMap)\n\nPrints the affine map to the standard error stream.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapEmptyGet-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineMapEmptyGet","text":"mlirAffineMapEmptyGet(ctx)\n\nCreates a zero result affine map with no dimensions or symbols in the context. The affine map is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapEqual-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAffineMapEqual","text":"mlirAffineMapEqual(a1, a2)\n\nChecks if two affine maps are equal.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapGet-NTuple{5, Any}","page":"API","title":"MLIR.API.mlirAffineMapGet","text":"mlirAffineMapGet(ctx, dimCount, symbolCount, nAffineExprs, affineExprs)\n\nCreates an affine map with results defined by the given list of affine expressions. The map resulting map also has the requested number of input dimensions and symbols, regardless of them being used in the results.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapGetContext-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineMapGetContext","text":"mlirAffineMapGetContext(affineMap)\n\nGets the context that the given affine map was created with\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapGetMajorSubMap-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAffineMapGetMajorSubMap","text":"mlirAffineMapGetMajorSubMap(affineMap, numResults)\n\nReturns the affine map consisting of the most major numResults results. Returns the null AffineMap if the numResults is equal to zero. Returns the affineMap if numResults is greater or equals to number of results of the given affine map.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapGetMinorSubMap-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAffineMapGetMinorSubMap","text":"mlirAffineMapGetMinorSubMap(affineMap, numResults)\n\nReturns the affine map consisting of the most minor numResults results. Returns the null AffineMap if the numResults is equal to zero. Returns the affineMap if numResults is greater or equals to number of results of the given affine map.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapGetNumDims-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineMapGetNumDims","text":"mlirAffineMapGetNumDims(affineMap)\n\nReturns the number of dimensions of the given affine map.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapGetNumInputs-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineMapGetNumInputs","text":"mlirAffineMapGetNumInputs(affineMap)\n\nReturns the number of inputs (dimensions + symbols) of the given affine map.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapGetNumResults-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineMapGetNumResults","text":"mlirAffineMapGetNumResults(affineMap)\n\nReturns the number of results of the given affine map.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapGetNumSymbols-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineMapGetNumSymbols","text":"mlirAffineMapGetNumSymbols(affineMap)\n\nReturns the number of symbols of the given affine map.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapGetResult-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAffineMapGetResult","text":"mlirAffineMapGetResult(affineMap, pos)\n\nReturns the result at the given position.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapGetSingleConstantResult-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineMapGetSingleConstantResult","text":"mlirAffineMapGetSingleConstantResult(affineMap)\n\nReturns the constant result of the given affine map. The function asserts that the map has a single constant result.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapGetSubMap-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirAffineMapGetSubMap","text":"mlirAffineMapGetSubMap(affineMap, size, resultPos)\n\nReturns the affine map consisting of the resultPos subset.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapIsEmpty-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineMapIsEmpty","text":"mlirAffineMapIsEmpty(affineMap)\n\nChecks whether the given affine map is an empty affine map.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapIsIdentity-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineMapIsIdentity","text":"mlirAffineMapIsIdentity(affineMap)\n\nChecks whether the given affine map is an identity affine map. The function asserts that the number of dimensions is greater or equal to the number of results.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapIsMinorIdentity-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineMapIsMinorIdentity","text":"mlirAffineMapIsMinorIdentity(affineMap)\n\nChecks whether the given affine map is a minor identity affine map.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapIsNull-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineMapIsNull","text":"mlirAffineMapIsNull(affineMap)\n\nChecks whether an affine map is null.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapIsPermutation-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineMapIsPermutation","text":"mlirAffineMapIsPermutation(affineMap)\n\nChecks whether the given affine map represents a symbol-less permutation map.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapIsProjectedPermutation-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineMapIsProjectedPermutation","text":"mlirAffineMapIsProjectedPermutation(affineMap)\n\nChecks whether the given affine map represents a subset of a symbol-less permutation map.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapIsSingleConstant-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineMapIsSingleConstant","text":"mlirAffineMapIsSingleConstant(affineMap)\n\nChecks whether the given affine map is a single result constant affine map.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapMinorIdentityGet-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirAffineMapMinorIdentityGet","text":"mlirAffineMapMinorIdentityGet(ctx, dims, results)\n\nCreates an identity affine map on the most minor dimensions in the context. The affine map is owned by the context. The function asserts that the number of dimensions is greater or equal to the number of results.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapMultiDimIdentityGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAffineMapMultiDimIdentityGet","text":"mlirAffineMapMultiDimIdentityGet(ctx, numDims)\n\nCreates an affine map with 'numDims' identity in the context. The affine map is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapPermutationGet-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirAffineMapPermutationGet","text":"mlirAffineMapPermutationGet(ctx, size, permutation)\n\nCreates an affine map with a permutation expression and its size in the context. The permutation expression is a non-empty vector of integers. The elements of the permutation vector must be continuous from 0 and cannot be repeated (i.e. [1,2,0] is a valid permutation. [2,0] or [1,1,2] is an invalid invalid permutation.) The affine map is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapPrint-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirAffineMapPrint","text":"mlirAffineMapPrint(affineMap, callback, userData)\n\nPrints an affine map by sending chunks of the string representation and forwarding userData tocallback`. Note that the callback may be called several times with consecutive chunks of the string.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapReplace-NTuple{5, Any}","page":"API","title":"MLIR.API.mlirAffineMapReplace","text":"mlirAffineMapReplace(affineMap, expression, replacement, numResultDims, numResultSyms)\n\nApply AffineExpr::replace(map) to each of the results and return a new new AffineMap with the new results and the specified number of dims and symbols.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMapZeroResultGet-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirAffineMapZeroResultGet","text":"mlirAffineMapZeroResultGet(ctx, dimCount, symbolCount)\n\nCreates a zero result affine map of the given dimensions and symbols in the context. The affine map is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineModExprGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAffineModExprGet","text":"mlirAffineModExprGet(lhs, rhs)\n\nCreates an affine mod expression with 'lhs' and 'rhs'.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineMulExprGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAffineMulExprGet","text":"mlirAffineMulExprGet(lhs, rhs)\n\nCreates an affine mul expression with 'lhs' and 'rhs'.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineSymbolExprGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAffineSymbolExprGet","text":"mlirAffineSymbolExprGet(ctx, position)\n\nCreates an affine symbol expression with 'position' in the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAffineSymbolExprGetPosition-Tuple{Any}","page":"API","title":"MLIR.API.mlirAffineSymbolExprGetPosition","text":"mlirAffineSymbolExprGetPosition(affineExpr)\n\nReturns the position of the given affine symbol expression.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAnyQuantizedTypeGet-NTuple{5, Any}","page":"API","title":"MLIR.API.mlirAnyQuantizedTypeGet","text":"mlirAnyQuantizedTypeGet(flags, storageType, expressedType, storageTypeMin, storageTypeMax)\n\nCreates an instance of AnyQuantizedType with the given parameters in the same context as storageType and returns it. The instance is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirArrayAttrGet-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirArrayAttrGet","text":"mlirArrayAttrGet(ctx, numElements, elements)\n\nCreates an array element containing the given list of elements in the given context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirArrayAttrGetElement-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirArrayAttrGetElement","text":"mlirArrayAttrGetElement(attr, pos)\n\nReturns pos-th element stored in the given array attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirArrayAttrGetNumElements-Tuple{Any}","page":"API","title":"MLIR.API.mlirArrayAttrGetNumElements","text":"mlirArrayAttrGetNumElements(attr)\n\nReturns the number of elements stored in the given array attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeDump-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeDump","text":"mlirAttributeDump(attr)\n\nPrints the attribute to the standard error stream.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeEqual-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAttributeEqual","text":"mlirAttributeEqual(a1, a2)\n\nChecks if two attributes are equal.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeGetContext-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeGetContext","text":"mlirAttributeGetContext(attribute)\n\nGets the context that an attribute was created with.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeGetNull-Tuple{}","page":"API","title":"MLIR.API.mlirAttributeGetNull","text":"mlirAttributeGetNull()\n\nReturns an empty attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeGetType-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeGetType","text":"mlirAttributeGetType(attribute)\n\nGets the type of this attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeGetTypeID-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeGetTypeID","text":"mlirAttributeGetTypeID(attribute)\n\nGets the type id of the attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsAAffineMap-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsAAffineMap","text":"mlirAttributeIsAAffineMap(attr)\n\nChecks whether the given attribute is an affine map attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsAArray-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsAArray","text":"mlirAttributeIsAArray(attr)\n\nChecks whether the given attribute is an array attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsABool-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsABool","text":"mlirAttributeIsABool(attr)\n\nChecks whether the given attribute is a bool attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsADenseElements-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsADenseElements","text":"mlirAttributeIsADenseElements(attr)\n\nChecks whether the given attribute is a dense elements attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsADictionary-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsADictionary","text":"mlirAttributeIsADictionary(attr)\n\nChecks whether the given attribute is a dictionary attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsAElements-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsAElements","text":"mlirAttributeIsAElements(attr)\n\nChecks whether the given attribute is an elements attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsAFlatSymbolRef-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsAFlatSymbolRef","text":"mlirAttributeIsAFlatSymbolRef(attr)\n\nChecks whether the given attribute is a flat symbol reference attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsAFloat-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsAFloat","text":"mlirAttributeIsAFloat(attr)\n\nChecks whether the given attribute is a floating point attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsAInteger-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsAInteger","text":"mlirAttributeIsAInteger(attr)\n\nChecks whether the given attribute is an integer attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsAIntegerSet-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsAIntegerSet","text":"mlirAttributeIsAIntegerSet(attr)\n\nChecks whether the given attribute is an integer set attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsAOpaque-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsAOpaque","text":"mlirAttributeIsAOpaque(attr)\n\nChecks whether the given attribute is an opaque attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsAOpaqueElements-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsAOpaqueElements","text":"mlirAttributeIsAOpaqueElements(attr)\n\nChecks whether the given attribute is an opaque elements attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsASparseElements-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsASparseElements","text":"mlirAttributeIsASparseElements(attr)\n\nChecks whether the given attribute is a sparse elements attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsASparseTensorEncodingAttr-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsASparseTensorEncodingAttr","text":"mlirAttributeIsASparseTensorEncodingAttr(attr)\n\nChecks whether the given attribute is a sparse_tensor.encoding attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsAString-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsAString","text":"mlirAttributeIsAString(attr)\n\nChecks whether the given attribute is a string attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsASymbolRef-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsASymbolRef","text":"mlirAttributeIsASymbolRef(attr)\n\nChecks whether the given attribute is a symbol reference attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsAType-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsAType","text":"mlirAttributeIsAType(attr)\n\nChecks whether the given attribute is a type attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsAUnit-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsAUnit","text":"mlirAttributeIsAUnit(attr)\n\nChecks whether the given attribute is a unit attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeIsNull-Tuple{Any}","page":"API","title":"MLIR.API.mlirAttributeIsNull","text":"mlirAttributeIsNull(attr)\n\nChecks whether an attribute is null.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributeParseGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirAttributeParseGet","text":"mlirAttributeParseGet(context, attr)\n\nParses an attribute. The attribute is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirAttributePrint-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirAttributePrint","text":"mlirAttributePrint(attr, callback, userData)\n\nPrints an attribute by sending chunks of the string representation and forwarding userData tocallback`. Note that the callback may be called several times with consecutive chunks of the string.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBF16TypeGet-Tuple{Any}","page":"API","title":"MLIR.API.mlirBF16TypeGet","text":"mlirBF16TypeGet(ctx)\n\nCreates a bf16 type in the given context. The type is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockAddArgument-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirBlockAddArgument","text":"mlirBlockAddArgument(block, type, loc)\n\nAppends an argument of the specified type to the block. Returns the newly added argument.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockAppendOwnedOperation-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirBlockAppendOwnedOperation","text":"mlirBlockAppendOwnedOperation(block, operation)\n\nTakes an operation owned by the caller and appends it to the block.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockArgumentGetArgNumber-Tuple{Any}","page":"API","title":"MLIR.API.mlirBlockArgumentGetArgNumber","text":"mlirBlockArgumentGetArgNumber(value)\n\nReturns the position of the value in the argument list of its block.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockArgumentGetOwner-Tuple{Any}","page":"API","title":"MLIR.API.mlirBlockArgumentGetOwner","text":"mlirBlockArgumentGetOwner(value)\n\nReturns the block in which this value is defined as an argument. Asserts if the value is not a block argument.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockArgumentSetType-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirBlockArgumentSetType","text":"mlirBlockArgumentSetType(value, type)\n\nSets the type of the block argument to the given type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockCreate-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirBlockCreate","text":"mlirBlockCreate(nArgs, args, locs)\n\nCreates a new empty block with the given argument types and transfers ownership to the caller.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockDestroy-Tuple{Any}","page":"API","title":"MLIR.API.mlirBlockDestroy","text":"mlirBlockDestroy(block)\n\nTakes a block owned by the caller and destroys it.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockEqual-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirBlockEqual","text":"mlirBlockEqual(block, other)\n\nChecks whether two blocks handles point to the same block. This does not perform deep comparison.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockGetArgument-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirBlockGetArgument","text":"mlirBlockGetArgument(block, pos)\n\nReturns pos-th argument of the block.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockGetFirstOperation-Tuple{Any}","page":"API","title":"MLIR.API.mlirBlockGetFirstOperation","text":"mlirBlockGetFirstOperation(block)\n\nReturns the first operation in the block.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockGetNextInRegion-Tuple{Any}","page":"API","title":"MLIR.API.mlirBlockGetNextInRegion","text":"mlirBlockGetNextInRegion(block)\n\nReturns the block immediately following the given block in its parent region.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockGetNumArguments-Tuple{Any}","page":"API","title":"MLIR.API.mlirBlockGetNumArguments","text":"mlirBlockGetNumArguments(block)\n\nReturns the number of arguments of the block.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockGetParentOperation-Tuple{Any}","page":"API","title":"MLIR.API.mlirBlockGetParentOperation","text":"mlirBlockGetParentOperation(arg1)\n\nReturns the closest surrounding operation that contains this block.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockGetParentRegion-Tuple{Any}","page":"API","title":"MLIR.API.mlirBlockGetParentRegion","text":"mlirBlockGetParentRegion(block)\n\nReturns the region that contains this block.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockGetTerminator-Tuple{Any}","page":"API","title":"MLIR.API.mlirBlockGetTerminator","text":"mlirBlockGetTerminator(block)\n\nReturns the terminator operation in the block or null if no terminator.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockInsertOwnedOperation-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirBlockInsertOwnedOperation","text":"mlirBlockInsertOwnedOperation(block, pos, operation)\n\nTakes an operation owned by the caller and inserts it as pos to the block. This is an expensive operation that scans the block linearly, prefer insertBefore/After instead.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockInsertOwnedOperationAfter-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirBlockInsertOwnedOperationAfter","text":"mlirBlockInsertOwnedOperationAfter(block, reference, operation)\n\nTakes an operation owned by the caller and inserts it after the (non-owned) reference operation in the given block. If the reference is null, prepends the operation. Otherwise, the reference must belong to the block.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockInsertOwnedOperationBefore-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirBlockInsertOwnedOperationBefore","text":"mlirBlockInsertOwnedOperationBefore(block, reference, operation)\n\nTakes an operation owned by the caller and inserts it before the (non-owned) reference operation in the given block. If the reference is null, appends the operation. Otherwise, the reference must belong to the block.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockIsNull-Tuple{Any}","page":"API","title":"MLIR.API.mlirBlockIsNull","text":"mlirBlockIsNull(block)\n\nChecks whether a block is null.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBlockPrint-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirBlockPrint","text":"mlirBlockPrint(block, callback, userData)\n\nPrints a block by sending chunks of the string representation and forwarding userData tocallback`. Note that the callback may be called several times with consecutive chunks of the string.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBoolAttrGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirBoolAttrGet","text":"mlirBoolAttrGet(ctx, value)\n\nCreates a bool attribute in the given context with the given value.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirBoolAttrGetValue-Tuple{Any}","page":"API","title":"MLIR.API.mlirBoolAttrGetValue","text":"mlirBoolAttrGetValue(attr)\n\nReturns the value stored in the given bool attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirCalibratedQuantizedTypeGet-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirCalibratedQuantizedTypeGet","text":"mlirCalibratedQuantizedTypeGet(expressedType, min, max)\n\nCreates an instance of CalibratedQuantizedType with the given parameters in the same context as expressedType and returns it. The instance is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirCalibratedQuantizedTypeGetMax-Tuple{Any}","page":"API","title":"MLIR.API.mlirCalibratedQuantizedTypeGetMax","text":"mlirCalibratedQuantizedTypeGetMax(type)\n\nReturns the max value of the given calibrated quantized type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirCalibratedQuantizedTypeGetMin-Tuple{Any}","page":"API","title":"MLIR.API.mlirCalibratedQuantizedTypeGetMin","text":"mlirCalibratedQuantizedTypeGetMin(type)\n\nReturns the min value of the given calibrated quantized type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirComplexTypeGet-Tuple{Any}","page":"API","title":"MLIR.API.mlirComplexTypeGet","text":"mlirComplexTypeGet(elementType)\n\nCreates a complex type with the given element type in the same context as the element type. The type is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirComplexTypeGetElementType-Tuple{Any}","page":"API","title":"MLIR.API.mlirComplexTypeGetElementType","text":"mlirComplexTypeGetElementType(type)\n\nReturns the element type of the given complex type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirContextAppendDialectRegistry-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirContextAppendDialectRegistry","text":"mlirContextAppendDialectRegistry(ctx, registry)\n\nAppend the contents of the given dialect registry to the registry associated with the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirContextAttachDiagnosticHandler-NTuple{4, Any}","page":"API","title":"MLIR.API.mlirContextAttachDiagnosticHandler","text":"mlirContextAttachDiagnosticHandler(context, handler, userData, deleteUserData)\n\nAttaches the diagnostic handler to the context. Handlers are invoked in the reverse order of attachment until one of them processes the diagnostic completely. When a handler is invoked it is passed the userData that was provided when it was attached. If non-NULL, deleteUserData is called once the system no longer needs to call the handler (for instance after the handler is detached or the context is destroyed). Returns an identifier that can be used to detach the handler.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirContextCreate-Tuple{}","page":"API","title":"MLIR.API.mlirContextCreate","text":"mlirContextCreate()\n\nCreates an MLIR context and transfers its ownership to the caller.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirContextDestroy-Tuple{Any}","page":"API","title":"MLIR.API.mlirContextDestroy","text":"mlirContextDestroy(context)\n\nTakes an MLIR context owned by the caller and destroys it.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirContextDetachDiagnosticHandler-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirContextDetachDiagnosticHandler","text":"mlirContextDetachDiagnosticHandler(context, id)\n\nDetaches an attached diagnostic handler from the context given its identifier.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirContextEnableMultithreading-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirContextEnableMultithreading","text":"mlirContextEnableMultithreading(context, enable)\n\nSet threading mode (must be set to false to print-ir-after-all).\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirContextEqual-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirContextEqual","text":"mlirContextEqual(ctx1, ctx2)\n\nChecks if two contexts are equal.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirContextGetAllowUnregisteredDialects-Tuple{Any}","page":"API","title":"MLIR.API.mlirContextGetAllowUnregisteredDialects","text":"mlirContextGetAllowUnregisteredDialects(context)\n\nReturns whether the context allows unregistered dialects.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirContextGetNumLoadedDialects-Tuple{Any}","page":"API","title":"MLIR.API.mlirContextGetNumLoadedDialects","text":"mlirContextGetNumLoadedDialects(context)\n\nReturns the number of dialects loaded by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirContextGetNumRegisteredDialects-Tuple{Any}","page":"API","title":"MLIR.API.mlirContextGetNumRegisteredDialects","text":"mlirContextGetNumRegisteredDialects(context)\n\nReturns the number of dialects registered with the given context. A registered dialect will be loaded if needed by the parser.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirContextGetOrLoadDialect-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirContextGetOrLoadDialect","text":"mlirContextGetOrLoadDialect(context, name)\n\nGets the dialect instance owned by the given context using the dialect namespace to identify it, loads (i.e., constructs the instance of) the dialect if necessary. If the dialect is not registered with the context, returns null. Use mlirContextLoad<Name>Dialect to load an unregistered dialect.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirContextIsNull-Tuple{Any}","page":"API","title":"MLIR.API.mlirContextIsNull","text":"mlirContextIsNull(context)\n\nChecks whether a context is null.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirContextIsRegisteredOperation-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirContextIsRegisteredOperation","text":"mlirContextIsRegisteredOperation(context, name)\n\nReturns whether the given fully-qualified operation (i.e. 'dialect.operation') is registered with the context. This will return true if the dialect is loaded and the operation is registered within the dialect.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirContextSetAllowUnregisteredDialects-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirContextSetAllowUnregisteredDialects","text":"mlirContextSetAllowUnregisteredDialects(context, allow)\n\nSets whether unregistered dialects are allowed in this context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDenseElementsAttrBoolGet-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirDenseElementsAttrBoolGet","text":"mlirDenseElementsAttrBoolGet(shapedType, numElements, elements)\n\nCreates a dense elements attribute with the given shaped type from elements of a specific type. Expects the element type of the shaped type to match the data element type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDenseElementsAttrGet-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirDenseElementsAttrGet","text":"mlirDenseElementsAttrGet(shapedType, numElements, elements)\n\nCreates a dense elements attribute with the given Shaped type and elements in the same context as the type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDenseElementsAttrGetBoolValue-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirDenseElementsAttrGetBoolValue","text":"mlirDenseElementsAttrGetBoolValue(attr, pos)\n\nReturns the pos-th value (flat contiguous indexing) of a specific type contained by the given dense elements attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDenseElementsAttrGetRawData-Tuple{Any}","page":"API","title":"MLIR.API.mlirDenseElementsAttrGetRawData","text":"mlirDenseElementsAttrGetRawData(attr)\n\nReturns the raw data of the given dense elements attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDenseElementsAttrGetSplatValue-Tuple{Any}","page":"API","title":"MLIR.API.mlirDenseElementsAttrGetSplatValue","text":"mlirDenseElementsAttrGetSplatValue(attr)\n\nReturns the single replicated value (splat) of a specific type contained by the given dense elements attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDenseElementsAttrIsSplat-Tuple{Any}","page":"API","title":"MLIR.API.mlirDenseElementsAttrIsSplat","text":"mlirDenseElementsAttrIsSplat(attr)\n\nChecks whether the given dense elements attribute contains a single replicated value (splat).\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDenseElementsAttrRawBufferGet-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirDenseElementsAttrRawBufferGet","text":"mlirDenseElementsAttrRawBufferGet(shapedType, rawBufferSize, rawBuffer)\n\nCreates a dense elements attribute with the given Shaped type and elements populated from a packed, row-major opaque buffer of contents.\n\nThe format of the raw buffer is a densely packed array of values that can be bitcast to the storage format of the element type specified. Types that are not byte aligned will be: - For bitwidth > 1: Rounded up to the next byte. - For bitwidth = 1: Packed into 8bit bytes with bits corresponding to the linear order of the shape type from MSB to LSB, padded to on the right.\n\nA raw buffer of a single element (or for 1-bit, a byte of value 0 or 255) will be interpreted as a splat. User code should be prepared for additional, conformant patterns to be identified as splats in the future.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDenseElementsAttrReshapeGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirDenseElementsAttrReshapeGet","text":"mlirDenseElementsAttrReshapeGet(attr, shapedType)\n\nCreates a dense elements attribute that has the same data as the given dense elements attribute and a different shaped type. The new type must have the same total number of elements.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDenseElementsAttrSplatGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirDenseElementsAttrSplatGet","text":"mlirDenseElementsAttrSplatGet(shapedType, element)\n\nCreates a dense elements attribute with the given Shaped type containing a single replicated element (splat).\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDenseElementsAttrStringGet-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirDenseElementsAttrStringGet","text":"mlirDenseElementsAttrStringGet(shapedType, numElements, strs)\n\nCreates a dense elements attribute with the given shaped type from string elements.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDiagnosticGetLocation-Tuple{Any}","page":"API","title":"MLIR.API.mlirDiagnosticGetLocation","text":"mlirDiagnosticGetLocation(diagnostic)\n\nReturns the location at which the diagnostic is reported.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDiagnosticGetNote-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirDiagnosticGetNote","text":"mlirDiagnosticGetNote(diagnostic, pos)\n\nReturns pos-th note attached to the diagnostic. Expects pos to be a valid zero-based index into the list of notes.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDiagnosticGetNumNotes-Tuple{Any}","page":"API","title":"MLIR.API.mlirDiagnosticGetNumNotes","text":"mlirDiagnosticGetNumNotes(diagnostic)\n\nReturns the number of notes attached to the diagnostic.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDiagnosticGetSeverity-Tuple{Any}","page":"API","title":"MLIR.API.mlirDiagnosticGetSeverity","text":"mlirDiagnosticGetSeverity(diagnostic)\n\nReturns the severity of the diagnostic.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDiagnosticPrint-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirDiagnosticPrint","text":"mlirDiagnosticPrint(diagnostic, callback, userData)\n\nPrints a diagnostic using the provided callback.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDialectEqual-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirDialectEqual","text":"mlirDialectEqual(dialect1, dialect2)\n\nChecks if two dialects that belong to the same context are equal. Dialects from different contexts will not compare equal.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDialectGetContext-Tuple{Any}","page":"API","title":"MLIR.API.mlirDialectGetContext","text":"mlirDialectGetContext(dialect)\n\nReturns the context that owns the dialect.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDialectGetNamespace-Tuple{Any}","page":"API","title":"MLIR.API.mlirDialectGetNamespace","text":"mlirDialectGetNamespace(dialect)\n\nReturns the namespace of the given dialect.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDialectHandleGetNamespace-Tuple{Any}","page":"API","title":"MLIR.API.mlirDialectHandleGetNamespace","text":"mlirDialectHandleGetNamespace(arg1)\n\nReturns the namespace associated with the provided dialect handle.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDialectHandleInsertDialect-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirDialectHandleInsertDialect","text":"mlirDialectHandleInsertDialect(arg1, arg2)\n\nInserts the dialect associated with the provided dialect handle into the provided dialect registry\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDialectHandleLoadDialect-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirDialectHandleLoadDialect","text":"mlirDialectHandleLoadDialect(arg1, arg2)\n\nLoads the dialect associated with the provided dialect handle.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDialectHandleRegisterDialect-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirDialectHandleRegisterDialect","text":"mlirDialectHandleRegisterDialect(arg1, arg2)\n\nRegisters the dialect associated with the provided dialect handle.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDialectIsNull-Tuple{Any}","page":"API","title":"MLIR.API.mlirDialectIsNull","text":"mlirDialectIsNull(dialect)\n\nChecks if the dialect is null.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDialectRegistryCreate-Tuple{}","page":"API","title":"MLIR.API.mlirDialectRegistryCreate","text":"mlirDialectRegistryCreate()\n\nCreates a dialect registry and transfers its ownership to the caller.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDialectRegistryDestroy-Tuple{Any}","page":"API","title":"MLIR.API.mlirDialectRegistryDestroy","text":"mlirDialectRegistryDestroy(registry)\n\nTakes a dialect registry owned by the caller and destroys it.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDialectRegistryIsNull-Tuple{Any}","page":"API","title":"MLIR.API.mlirDialectRegistryIsNull","text":"mlirDialectRegistryIsNull(registry)\n\nChecks if the dialect registry is null.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDictionaryAttrGet-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirDictionaryAttrGet","text":"mlirDictionaryAttrGet(ctx, numElements, elements)\n\nCreates a dictionary attribute containing the given list of elements in the provided context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDictionaryAttrGetElement-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirDictionaryAttrGetElement","text":"mlirDictionaryAttrGetElement(attr, pos)\n\nReturns pos-th element of the given dictionary attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDictionaryAttrGetElementByName-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirDictionaryAttrGetElementByName","text":"mlirDictionaryAttrGetElementByName(attr, name)\n\nReturns the dictionary attribute element with the given name or NULL if the given name does not exist in the dictionary.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirDictionaryAttrGetNumElements-Tuple{Any}","page":"API","title":"MLIR.API.mlirDictionaryAttrGetNumElements","text":"mlirDictionaryAttrGetNumElements(attr)\n\nReturns the number of attributes contained in a dictionary attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirElementsAttrGetNumElements-Tuple{Any}","page":"API","title":"MLIR.API.mlirElementsAttrGetNumElements","text":"mlirElementsAttrGetNumElements(attr)\n\nGets the total number of elements in the given elements attribute. In order to iterate over the attribute, obtain its type, which must be a statically shaped type and use its sizes to build a multi-dimensional index.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirElementsAttrGetValue-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirElementsAttrGetValue","text":"mlirElementsAttrGetValue(attr, rank, idxs)\n\nReturns the element at the given rank-dimensional index.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirElementsAttrIsValidIndex-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirElementsAttrIsValidIndex","text":"mlirElementsAttrIsValidIndex(attr, rank, idxs)\n\nChecks whether the given rank-dimensional index is valid in the given elements attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirEmitError-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirEmitError","text":"mlirEmitError(location, message)\n\nEmits an error at the given location through the diagnostics engine. Used for testing purposes.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirEnableGlobalDebug-Tuple{Any}","page":"API","title":"MLIR.API.mlirEnableGlobalDebug","text":"mlirEnableGlobalDebug(enable)\n\nSets the global debugging flag.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirExecutionEngineCreate-NTuple{4, Any}","page":"API","title":"MLIR.API.mlirExecutionEngineCreate","text":"mlirExecutionEngineCreate(op, optLevel, numPaths, sharedLibPaths)\n\nCreates an ExecutionEngine for the provided ModuleOp. The ModuleOp is expected to be \"translatable\" to LLVM IR (only contains operations in dialects that implement the LLVMTranslationDialectInterface). The module ownership stays with the client and can be destroyed as soon as the call returns. optLevel is the optimization level to be used for transformation and code generation. LLVM passes at optLevel are run before code generation. The number and array of paths corresponding to shared libraries that will be loaded are specified via numPaths and sharedLibPaths respectively. TODO: figure out other options.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirExecutionEngineDestroy-Tuple{Any}","page":"API","title":"MLIR.API.mlirExecutionEngineDestroy","text":"mlirExecutionEngineDestroy(jit)\n\nDestroy an ExecutionEngine instance.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirExecutionEngineDumpToObjectFile-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirExecutionEngineDumpToObjectFile","text":"mlirExecutionEngineDumpToObjectFile(jit, fileName)\n\nDump as an object in fileName.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirExecutionEngineInvokePacked-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirExecutionEngineInvokePacked","text":"mlirExecutionEngineInvokePacked(jit, name, arguments)\n\nInvoke a native function in the execution engine by name with the arguments and result of the invoked function passed as an array of pointers. The function must have been tagged with the llvm.emit\\_c\\_interface attribute. Returns a failure if the execution fails for any reason (the function name can't be resolved for instance).\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirExecutionEngineIsNull-Tuple{Any}","page":"API","title":"MLIR.API.mlirExecutionEngineIsNull","text":"mlirExecutionEngineIsNull(jit)\n\nChecks whether an execution engine is null.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirExecutionEngineLookup-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirExecutionEngineLookup","text":"mlirExecutionEngineLookup(jit, name)\n\nLookup a native function in the execution engine by name, returns nullptr if the name can't be looked-up.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirExecutionEngineLookupPacked-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirExecutionEngineLookupPacked","text":"mlirExecutionEngineLookupPacked(jit, name)\n\nLookup the wrapper of the native function in the execution engine with the given name, returns nullptr if the function can't be looked-up.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirExecutionEngineRegisterSymbol-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirExecutionEngineRegisterSymbol","text":"mlirExecutionEngineRegisterSymbol(jit, name, sym)\n\nRegister a symbol with the jit: this symbol will be accessible to the jitted code.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirF16TypeGet-Tuple{Any}","page":"API","title":"MLIR.API.mlirF16TypeGet","text":"mlirF16TypeGet(ctx)\n\nCreates an f16 type in the given context. The type is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirF32TypeGet-Tuple{Any}","page":"API","title":"MLIR.API.mlirF32TypeGet","text":"mlirF32TypeGet(ctx)\n\nCreates an f32 type in the given context. The type is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirF64TypeGet-Tuple{Any}","page":"API","title":"MLIR.API.mlirF64TypeGet","text":"mlirF64TypeGet(ctx)\n\nCreates a f64 type in the given context. The type is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirFlatSymbolRefAttrGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirFlatSymbolRefAttrGet","text":"mlirFlatSymbolRefAttrGet(ctx, symbol)\n\nCreates a flat symbol reference attribute in the given context referencing a symbol identified by the given string.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirFlatSymbolRefAttrGetValue-Tuple{Any}","page":"API","title":"MLIR.API.mlirFlatSymbolRefAttrGetValue","text":"mlirFlatSymbolRefAttrGetValue(attr)\n\nReturns the referenced symbol as a string reference. The data remains live as long as the context in which the attribute lives.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirFloatAttrDoubleGet-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirFloatAttrDoubleGet","text":"mlirFloatAttrDoubleGet(ctx, type, value)\n\nCreates a floating point attribute in the given context with the given double value and double-precision FP semantics.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirFloatAttrDoubleGetChecked-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirFloatAttrDoubleGetChecked","text":"mlirFloatAttrDoubleGetChecked(loc, type, value)\n\nSame as \"mlirFloatAttrDoubleGet\", but if the type is not valid for a construction of a FloatAttr, returns a null MlirAttribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirFloatAttrGetValueDouble-Tuple{Any}","page":"API","title":"MLIR.API.mlirFloatAttrGetValueDouble","text":"mlirFloatAttrGetValueDouble(attr)\n\nReturns the value stored in the given floating point attribute, interpreting the value as double.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirFunctionTypeGet-NTuple{5, Any}","page":"API","title":"MLIR.API.mlirFunctionTypeGet","text":"mlirFunctionTypeGet(ctx, numInputs, inputs, numResults, results)\n\nCreates a function type, mapping a list of input types to result types.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirFunctionTypeGetInput-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirFunctionTypeGetInput","text":"mlirFunctionTypeGetInput(type, pos)\n\nReturns the pos-th input type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirFunctionTypeGetNumInputs-Tuple{Any}","page":"API","title":"MLIR.API.mlirFunctionTypeGetNumInputs","text":"mlirFunctionTypeGetNumInputs(type)\n\nReturns the number of input types.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirFunctionTypeGetNumResults-Tuple{Any}","page":"API","title":"MLIR.API.mlirFunctionTypeGetNumResults","text":"mlirFunctionTypeGetNumResults(type)\n\nReturns the number of result types.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirFunctionTypeGetResult-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirFunctionTypeGetResult","text":"mlirFunctionTypeGetResult(type, pos)\n\nReturns the pos-th result type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIdentifierEqual-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirIdentifierEqual","text":"mlirIdentifierEqual(ident, other)\n\nChecks whether two identifiers are the same.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIdentifierGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirIdentifierGet","text":"mlirIdentifierGet(context, str)\n\nGets an identifier with the given string value.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIdentifierGetContext-Tuple{Any}","page":"API","title":"MLIR.API.mlirIdentifierGetContext","text":"mlirIdentifierGetContext(arg1)\n\nReturns the context associated with this identifier\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIdentifierStr-Tuple{Any}","page":"API","title":"MLIR.API.mlirIdentifierStr","text":"mlirIdentifierStr(ident)\n\nGets the string value of the identifier.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIndexTypeGet-Tuple{Any}","page":"API","title":"MLIR.API.mlirIndexTypeGet","text":"mlirIndexTypeGet(ctx)\n\nCreates an index type in the given context. The type is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirInferTypeOpInterfaceInferReturnTypes-NTuple{10, Any}","page":"API","title":"MLIR.API.mlirInferTypeOpInterfaceInferReturnTypes","text":"mlirInferTypeOpInterfaceInferReturnTypes(opName, context, location, nOperands, operands, attributes, nRegions, regions, callback, userData)\n\nInfers the return types of the operation identified by its canonical given the arguments that will be supplied to its generic builder. Calls callback with the types of inferred arguments, potentially several times, on success. Returns failure otherwise.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirInferTypeOpInterfaceTypeID-Tuple{}","page":"API","title":"MLIR.API.mlirInferTypeOpInterfaceTypeID","text":"mlirInferTypeOpInterfaceTypeID()\n\nReturns the interface TypeID of the InferTypeOpInterface.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerAttrGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirIntegerAttrGet","text":"mlirIntegerAttrGet(type, value)\n\nCreates an integer attribute of the given type with the given integer value.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerAttrGetValueInt-Tuple{Any}","page":"API","title":"MLIR.API.mlirIntegerAttrGetValueInt","text":"mlirIntegerAttrGetValueInt(attr)\n\nReturns the value stored in the given integer attribute, assuming the value fits into a 64-bit integer.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerSetDump-Tuple{Any}","page":"API","title":"MLIR.API.mlirIntegerSetDump","text":"mlirIntegerSetDump(set)\n\nPrints an integer set to the standard error stream.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerSetEmptyGet-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirIntegerSetEmptyGet","text":"mlirIntegerSetEmptyGet(context, numDims, numSymbols)\n\nGets or creates a new canonically empty integer set with the give number of dimensions and symbols in the given context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerSetEqual-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirIntegerSetEqual","text":"mlirIntegerSetEqual(s1, s2)\n\nChecks if two integer set objects are equal. This is a \"shallow\" comparison of two objects. Only the sets with some small number of constraints are uniqued and compare equal here. Set objects that represent the same integer set with different constraints may be considered non-equal by this check. Set difference followed by an (expensive) emptiness check should be used to check equivalence of the underlying integer sets.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerSetGet-NTuple{6, Any}","page":"API","title":"MLIR.API.mlirIntegerSetGet","text":"mlirIntegerSetGet(context, numDims, numSymbols, numConstraints, constraints, eqFlags)\n\nGets or creates a new integer set in the given context. The set is defined by a list of affine constraints, with the given number of input dimensions and symbols, which are treated as either equalities (eqFlags is 1) or inequalities (eqFlags is 0). Both constraints and eqFlags are expected to point to at least numConstraint consecutive values.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerSetGetConstraint-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirIntegerSetGetConstraint","text":"mlirIntegerSetGetConstraint(set, pos)\n\nReturns pos-th constraint of the set.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerSetGetContext-Tuple{Any}","page":"API","title":"MLIR.API.mlirIntegerSetGetContext","text":"mlirIntegerSetGetContext(set)\n\nGets the context in which the given integer set lives.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerSetGetNumConstraints-Tuple{Any}","page":"API","title":"MLIR.API.mlirIntegerSetGetNumConstraints","text":"mlirIntegerSetGetNumConstraints(set)\n\nReturns the number of constraints (equalities + inequalities) in the given set.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerSetGetNumDims-Tuple{Any}","page":"API","title":"MLIR.API.mlirIntegerSetGetNumDims","text":"mlirIntegerSetGetNumDims(set)\n\nReturns the number of dimensions in the given set.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerSetGetNumEqualities-Tuple{Any}","page":"API","title":"MLIR.API.mlirIntegerSetGetNumEqualities","text":"mlirIntegerSetGetNumEqualities(set)\n\nReturns the number of equalities in the given set.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerSetGetNumInequalities-Tuple{Any}","page":"API","title":"MLIR.API.mlirIntegerSetGetNumInequalities","text":"mlirIntegerSetGetNumInequalities(set)\n\nReturns the number of inequalities in the given set.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerSetGetNumInputs-Tuple{Any}","page":"API","title":"MLIR.API.mlirIntegerSetGetNumInputs","text":"mlirIntegerSetGetNumInputs(set)\n\nReturns the number of inputs (dimensions + symbols) in the given set.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerSetGetNumSymbols-Tuple{Any}","page":"API","title":"MLIR.API.mlirIntegerSetGetNumSymbols","text":"mlirIntegerSetGetNumSymbols(set)\n\nReturns the number of symbols in the given set.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerSetIsCanonicalEmpty-Tuple{Any}","page":"API","title":"MLIR.API.mlirIntegerSetIsCanonicalEmpty","text":"mlirIntegerSetIsCanonicalEmpty(set)\n\nChecks whether the given set is a canonical empty set, e.g., the set returned by mlirIntegerSetEmptyGet.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerSetIsConstraintEq-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirIntegerSetIsConstraintEq","text":"mlirIntegerSetIsConstraintEq(set, pos)\n\nReturns true of the pos-th constraint of the set is an equality constraint, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerSetIsNull-Tuple{Any}","page":"API","title":"MLIR.API.mlirIntegerSetIsNull","text":"mlirIntegerSetIsNull(set)\n\nChecks whether an integer set is a null object.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerSetPrint-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirIntegerSetPrint","text":"mlirIntegerSetPrint(set, callback, userData)\n\nPrints an integer set by sending chunks of the string representation and forwarding userData tocallback`. Note that the callback may be called several times with consecutive chunks of the string.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerSetReplaceGet-NTuple{5, Any}","page":"API","title":"MLIR.API.mlirIntegerSetReplaceGet","text":"mlirIntegerSetReplaceGet(set, dimReplacements, symbolReplacements, numResultDims, numResultSymbols)\n\nGets or creates a new integer set in which the values and dimensions of the given set are replaced with the given affine expressions. dimReplacements and symbolReplacements are expected to point to at least as many consecutive expressions as the given set has dimensions and symbols, respectively. The new set will have numResultDims and numResultSymbols dimensions and symbols, respectively.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerTypeGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirIntegerTypeGet","text":"mlirIntegerTypeGet(ctx, bitwidth)\n\nCreates a signless integer type of the given bitwidth in the context. The type is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerTypeGetWidth-Tuple{Any}","page":"API","title":"MLIR.API.mlirIntegerTypeGetWidth","text":"mlirIntegerTypeGetWidth(type)\n\nReturns the bitwidth of an integer type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerTypeIsSigned-Tuple{Any}","page":"API","title":"MLIR.API.mlirIntegerTypeIsSigned","text":"mlirIntegerTypeIsSigned(type)\n\nChecks whether the given integer type is signed.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerTypeIsSignless-Tuple{Any}","page":"API","title":"MLIR.API.mlirIntegerTypeIsSignless","text":"mlirIntegerTypeIsSignless(type)\n\nChecks whether the given integer type is signless.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerTypeIsUnsigned-Tuple{Any}","page":"API","title":"MLIR.API.mlirIntegerTypeIsUnsigned","text":"mlirIntegerTypeIsUnsigned(type)\n\nChecks whether the given integer type is unsigned.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerTypeSignedGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirIntegerTypeSignedGet","text":"mlirIntegerTypeSignedGet(ctx, bitwidth)\n\nCreates a signed integer type of the given bitwidth in the context. The type is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIntegerTypeUnsignedGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirIntegerTypeUnsignedGet","text":"mlirIntegerTypeUnsignedGet(ctx, bitwidth)\n\nCreates an unsigned integer type of the given bitwidth in the context. The type is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirIsGlobalDebugEnabled-Tuple{}","page":"API","title":"MLIR.API.mlirIsGlobalDebugEnabled","text":"mlirIsGlobalDebugEnabled()\n\nRetuns true if the global debugging flag is set, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLLVMArrayTypeGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirLLVMArrayTypeGet","text":"mlirLLVMArrayTypeGet(elementType, numElements)\n\nCreates an llvm.array type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLLVMFunctionTypeGet-NTuple{4, Any}","page":"API","title":"MLIR.API.mlirLLVMFunctionTypeGet","text":"mlirLLVMFunctionTypeGet(resultType, nArgumentTypes, argumentTypes, isVarArg)\n\nCreates an llvm.func type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLLVMPointerTypeGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirLLVMPointerTypeGet","text":"mlirLLVMPointerTypeGet(pointee, addressSpace)\n\nCreates an llvm.ptr type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLLVMStructTypeLiteralGet-NTuple{4, Any}","page":"API","title":"MLIR.API.mlirLLVMStructTypeLiteralGet","text":"mlirLLVMStructTypeLiteralGet(ctx, nFieldTypes, fieldTypes, isPacked)\n\nCreates an LLVM literal (unnamed) struct type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLLVMVoidTypeGet-Tuple{Any}","page":"API","title":"MLIR.API.mlirLLVMVoidTypeGet","text":"mlirLLVMVoidTypeGet(ctx)\n\nCreates an llmv.void type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLinalgFillBuiltinNamedOpRegion-Tuple{Any}","page":"API","title":"MLIR.API.mlirLinalgFillBuiltinNamedOpRegion","text":"mlirLinalgFillBuiltinNamedOpRegion(mlirOp)\n\nApply the special region builder for the builtin named Linalg op. Assert that mlirOp is a builtin named Linalg op.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLocationCallSiteGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirLocationCallSiteGet","text":"mlirLocationCallSiteGet(callee, caller)\n\nCreates a call site location with a callee and a caller.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLocationEqual-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirLocationEqual","text":"mlirLocationEqual(l1, l2)\n\nChecks if two locations are equal.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLocationFileLineColGet-NTuple{4, Any}","page":"API","title":"MLIR.API.mlirLocationFileLineColGet","text":"mlirLocationFileLineColGet(context, filename, line, col)\n\nCreates an File/Line/Column location owned by the given context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLocationFusedGet-NTuple{4, Any}","page":"API","title":"MLIR.API.mlirLocationFusedGet","text":"mlirLocationFusedGet(ctx, nLocations, locations, metadata)\n\nCreates a fused location with an array of locations and metadata.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLocationGetContext-Tuple{Any}","page":"API","title":"MLIR.API.mlirLocationGetContext","text":"mlirLocationGetContext(location)\n\nGets the context that a location was created with.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLocationIsNull-Tuple{Any}","page":"API","title":"MLIR.API.mlirLocationIsNull","text":"mlirLocationIsNull(location)\n\nChecks if the location is null.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLocationNameGet-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirLocationNameGet","text":"mlirLocationNameGet(context, name, childLoc)\n\nCreates a name location owned by the given context. Providing null location for childLoc is allowed and if childLoc is null location, then the behavior is the same as having unknown child location.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLocationPrint-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirLocationPrint","text":"mlirLocationPrint(location, callback, userData)\n\nPrints a location by sending chunks of the string representation and forwarding userData tocallback`. Note that the callback may be called several times with consecutive chunks of the string.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLocationUnknownGet-Tuple{Any}","page":"API","title":"MLIR.API.mlirLocationUnknownGet","text":"mlirLocationUnknownGet(context)\n\nCreates a location with unknown position owned by the given context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLogicalResultFailure-Tuple{}","page":"API","title":"MLIR.API.mlirLogicalResultFailure","text":"mlirLogicalResultFailure()\n\nCreates a logical result representing a failure.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLogicalResultIsFailure-Tuple{Any}","page":"API","title":"MLIR.API.mlirLogicalResultIsFailure","text":"mlirLogicalResultIsFailure(res)\n\nChecks if the given logical result represents a failure.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLogicalResultIsSuccess-Tuple{Any}","page":"API","title":"MLIR.API.mlirLogicalResultIsSuccess","text":"mlirLogicalResultIsSuccess(res)\n\nChecks if the given logical result represents a success.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirLogicalResultSuccess-Tuple{}","page":"API","title":"MLIR.API.mlirLogicalResultSuccess","text":"mlirLogicalResultSuccess()\n\nCreates a logical result representing a success.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirMemRefTypeContiguousGet-NTuple{4, Any}","page":"API","title":"MLIR.API.mlirMemRefTypeContiguousGet","text":"mlirMemRefTypeContiguousGet(elementType, rank, shape, memorySpace)\n\nCreates a MemRef type with the given rank, shape, memory space and element type in the same context as the element type. The type has no affine maps, i.e. represents a default row-major contiguous memref. The type is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirMemRefTypeContiguousGetChecked-NTuple{5, Any}","page":"API","title":"MLIR.API.mlirMemRefTypeContiguousGetChecked","text":"mlirMemRefTypeContiguousGetChecked(loc, elementType, rank, shape, memorySpace)\n\nSame as \"mlirMemRefTypeContiguousGet\" but returns a nullptr wrapping MlirType on illegal arguments, emitting appropriate diagnostics.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirMemRefTypeGet-NTuple{5, Any}","page":"API","title":"MLIR.API.mlirMemRefTypeGet","text":"mlirMemRefTypeGet(elementType, rank, shape, layout, memorySpace)\n\nCreates a MemRef type with the given rank and shape, a potentially empty list of affine layout maps, the given memory space and element type, in the same context as element type. The type is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirMemRefTypeGetAffineMap-Tuple{Any}","page":"API","title":"MLIR.API.mlirMemRefTypeGetAffineMap","text":"mlirMemRefTypeGetAffineMap(type)\n\nReturns the affine map of the given MemRef type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirMemRefTypeGetChecked-NTuple{6, Any}","page":"API","title":"MLIR.API.mlirMemRefTypeGetChecked","text":"mlirMemRefTypeGetChecked(loc, elementType, rank, shape, layout, memorySpace)\n\nSame as \"mlirMemRefTypeGet\" but returns a nullptr-wrapping MlirType o illegal arguments, emitting appropriate diagnostics.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirMemRefTypeGetLayout-Tuple{Any}","page":"API","title":"MLIR.API.mlirMemRefTypeGetLayout","text":"mlirMemRefTypeGetLayout(type)\n\nReturns the layout of the given MemRef type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirMemRefTypeGetMemorySpace-Tuple{Any}","page":"API","title":"MLIR.API.mlirMemRefTypeGetMemorySpace","text":"mlirMemRefTypeGetMemorySpace(type)\n\nReturns the memory space of the given MemRef type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirModuleCreateEmpty-Tuple{Any}","page":"API","title":"MLIR.API.mlirModuleCreateEmpty","text":"mlirModuleCreateEmpty(location)\n\nCreates a new, empty module and transfers ownership to the caller.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirModuleCreateParse-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirModuleCreateParse","text":"mlirModuleCreateParse(context, _module)\n\nParses a module from the string and transfers ownership to the caller.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirModuleDestroy-Tuple{Any}","page":"API","title":"MLIR.API.mlirModuleDestroy","text":"mlirModuleDestroy(_module)\n\nTakes a module owned by the caller and deletes it.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirModuleFromOperation-Tuple{Any}","page":"API","title":"MLIR.API.mlirModuleFromOperation","text":"mlirModuleFromOperation(op)\n\nViews the generic operation as a module. The returned module is null when the input operation was not a ModuleOp.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirModuleGetBody-Tuple{Any}","page":"API","title":"MLIR.API.mlirModuleGetBody","text":"mlirModuleGetBody(_module)\n\nGets the body of the module, i.e. the only block it contains.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirModuleGetContext-Tuple{Any}","page":"API","title":"MLIR.API.mlirModuleGetContext","text":"mlirModuleGetContext(_module)\n\nGets the context that a module was created with.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirModuleGetOperation-Tuple{Any}","page":"API","title":"MLIR.API.mlirModuleGetOperation","text":"mlirModuleGetOperation(_module)\n\nViews the module as a generic operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirModuleIsNull-Tuple{Any}","page":"API","title":"MLIR.API.mlirModuleIsNull","text":"mlirModuleIsNull(_module)\n\nChecks whether a module is null.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirNamedAttributeGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirNamedAttributeGet","text":"mlirNamedAttributeGet(name, attr)\n\nAssociates an attribute with the name. Takes ownership of neither.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirNoneTypeGet-Tuple{Any}","page":"API","title":"MLIR.API.mlirNoneTypeGet","text":"mlirNoneTypeGet(ctx)\n\nCreates a None type in the given context. The type is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOpPassManagerAddOwnedPass-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirOpPassManagerAddOwnedPass","text":"mlirOpPassManagerAddOwnedPass(passManager, pass)\n\nAdd a pass and transfer ownership to the provided mlirOpPassManager. If the pass is not a generic operation pass or matching the type of the provided PassManager, a new OpPassManager is implicitly nested under the provided PassManager.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOpPassManagerGetNestedUnder-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirOpPassManagerGetNestedUnder","text":"mlirOpPassManagerGetNestedUnder(passManager, operationName)\n\nNest an OpPassManager under the provided OpPassManager, the nested passmanager will only run on operations matching the provided name. The returned OpPassManager will be destroyed when the parent is destroyed.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOpPrintingFlagsCreate-Tuple{}","page":"API","title":"MLIR.API.mlirOpPrintingFlagsCreate","text":"mlirOpPrintingFlagsCreate()\n\nCreates new printing flags with defaults, intended for customization. Must be freed with a call to mlirOpPrintingFlagsDestroy().\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOpPrintingFlagsDestroy-Tuple{Any}","page":"API","title":"MLIR.API.mlirOpPrintingFlagsDestroy","text":"mlirOpPrintingFlagsDestroy(flags)\n\nDestroys printing flags created with mlirOpPrintingFlagsCreate.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOpPrintingFlagsElideLargeElementsAttrs-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirOpPrintingFlagsElideLargeElementsAttrs","text":"mlirOpPrintingFlagsElideLargeElementsAttrs(flags, largeElementLimit)\n\nEnables the elision of large elements attributes by printing a lexically valid but otherwise meaningless form instead of the element data. The largeElementLimit is used to configure what is considered to be a \"large\" ElementsAttr by providing an upper limit to the number of elements.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOpPrintingFlagsEnableDebugInfo-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirOpPrintingFlagsEnableDebugInfo","text":"mlirOpPrintingFlagsEnableDebugInfo(flags, prettyForm)\n\nEnable printing of debug information. If 'prettyForm' is set to true, debug information is printed in a more readable 'pretty' form. Note: The IR generated with 'prettyForm' is not parsable.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOpPrintingFlagsPrintGenericOpForm-Tuple{Any}","page":"API","title":"MLIR.API.mlirOpPrintingFlagsPrintGenericOpForm","text":"mlirOpPrintingFlagsPrintGenericOpForm(flags)\n\nAlways print operations in the generic form.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOpPrintingFlagsUseLocalScope-Tuple{Any}","page":"API","title":"MLIR.API.mlirOpPrintingFlagsUseLocalScope","text":"mlirOpPrintingFlagsUseLocalScope(flags)\n\nUse local scope when printing the operation. This allows for using the printer in a more localized and thread-safe setting, but may not necessarily be identical to what the IR will look like when dumping the full module.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOpResultGetOwner-Tuple{Any}","page":"API","title":"MLIR.API.mlirOpResultGetOwner","text":"mlirOpResultGetOwner(value)\n\nReturns an operation that produced this value as its result. Asserts if the value is not an op result.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOpResultGetResultNumber-Tuple{Any}","page":"API","title":"MLIR.API.mlirOpResultGetResultNumber","text":"mlirOpResultGetResultNumber(value)\n\nReturns the position of the value in the list of results of the operation that produced it.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOpaqueAttrGet-NTuple{5, Any}","page":"API","title":"MLIR.API.mlirOpaqueAttrGet","text":"mlirOpaqueAttrGet(ctx, dialectNamespace, dataLength, data, type)\n\nCreates an opaque attribute in the given context associated with the dialect identified by its namespace. The attribute contains opaque byte data of the specified length (data need not be null-terminated).\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOpaqueAttrGetData-Tuple{Any}","page":"API","title":"MLIR.API.mlirOpaqueAttrGetData","text":"mlirOpaqueAttrGetData(attr)\n\nReturns the raw data as a string reference. The data remains live as long as the context in which the attribute lives.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOpaqueAttrGetDialectNamespace-Tuple{Any}","page":"API","title":"MLIR.API.mlirOpaqueAttrGetDialectNamespace","text":"mlirOpaqueAttrGetDialectNamespace(attr)\n\nReturns the namespace of the dialect with which the given opaque attribute is associated. The namespace string is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationClone-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationClone","text":"mlirOperationClone(op)\n\nCreates a deep copy of an operation. The operation is not inserted and ownership is transferred to the caller.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationCreate-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationCreate","text":"mlirOperationCreate(state)\n\nCreates an operation and transfers ownership to the caller. Note that caller owned child objects are transferred in this call and must not be further used. Particularly, this applies to any regions added to the state (the implementation may invalidate any such pointers).\n\nThis call can fail under the following conditions, in which case, it will return a null operation and emit diagnostics: - Result type inference is enabled and cannot be performed.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationDestroy-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationDestroy","text":"mlirOperationDestroy(op)\n\nTakes an operation owned by the caller and destroys it.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationDump-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationDump","text":"mlirOperationDump(op)\n\nPrints an operation to stderr.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationEqual-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirOperationEqual","text":"mlirOperationEqual(op, other)\n\nChecks whether two operation handles point to the same operation. This does not perform deep comparison.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetAttribute-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirOperationGetAttribute","text":"mlirOperationGetAttribute(op, pos)\n\nReturn pos-th attribute of the operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetAttributeByName-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirOperationGetAttributeByName","text":"mlirOperationGetAttributeByName(op, name)\n\nReturns an attribute attached to the operation given its name.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetBlock-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationGetBlock","text":"mlirOperationGetBlock(op)\n\nGets the block that owns this operation, returning null if the operation is not owned.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetContext-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationGetContext","text":"mlirOperationGetContext(op)\n\nGets the context this operation is associated with\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetFirstRegion-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationGetFirstRegion","text":"mlirOperationGetFirstRegion(op)\n\nReturns first region attached to the operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetLocation-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationGetLocation","text":"mlirOperationGetLocation(op)\n\nGets the location of the operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetName-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationGetName","text":"mlirOperationGetName(op)\n\nGets the name of the operation as an identifier.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetNextInBlock-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationGetNextInBlock","text":"mlirOperationGetNextInBlock(op)\n\nReturns an operation immediately following the given operation it its enclosing block.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetNumAttributes-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationGetNumAttributes","text":"mlirOperationGetNumAttributes(op)\n\nReturns the number of attributes attached to the operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetNumOperands-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationGetNumOperands","text":"mlirOperationGetNumOperands(op)\n\nReturns the number of operands of the operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetNumRegions-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationGetNumRegions","text":"mlirOperationGetNumRegions(op)\n\nReturns the number of regions attached to the given operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetNumResults-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationGetNumResults","text":"mlirOperationGetNumResults(op)\n\nReturns the number of results of the operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetNumSuccessors-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationGetNumSuccessors","text":"mlirOperationGetNumSuccessors(op)\n\nReturns the number of successor blocks of the operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetOperand-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirOperationGetOperand","text":"mlirOperationGetOperand(op, pos)\n\nReturns pos-th operand of the operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetParentOperation-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationGetParentOperation","text":"mlirOperationGetParentOperation(op)\n\nGets the operation that owns this operation, returning null if the operation is not owned.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetRegion-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirOperationGetRegion","text":"mlirOperationGetRegion(op, pos)\n\nReturns pos-th region attached to the operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetResult-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirOperationGetResult","text":"mlirOperationGetResult(op, pos)\n\nReturns pos-th result of the operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetSuccessor-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirOperationGetSuccessor","text":"mlirOperationGetSuccessor(op, pos)\n\nReturns pos-th successor of the operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationGetTypeID-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationGetTypeID","text":"mlirOperationGetTypeID(op)\n\nGets the type id of the operation. Returns null if the operation does not have a registered operation description.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationImplementsInterface-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirOperationImplementsInterface","text":"mlirOperationImplementsInterface(operation, interfaceTypeID)\n\nReturns true if the given operation implements an interface identified by its TypeID.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationImplementsInterfaceStatic-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirOperationImplementsInterfaceStatic","text":"mlirOperationImplementsInterfaceStatic(operationName, context, interfaceTypeID)\n\nReturns true if the operation identified by its canonical string name implements the interface identified by its TypeID in the given context. Note that interfaces may be attached to operations in some contexts and not others.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationIsNull-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationIsNull","text":"mlirOperationIsNull(op)\n\nChecks whether the underlying operation is null.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationMoveAfter-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirOperationMoveAfter","text":"mlirOperationMoveAfter(op, other)\n\nMoves the given operation immediately after the other operation in its parent block. The given operation may be owned by the caller or by its current block. The other operation must belong to a block. In any case, the ownership is transferred to the block of the other operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationMoveBefore-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirOperationMoveBefore","text":"mlirOperationMoveBefore(op, other)\n\nMoves the given operation immediately before the other operation in its parent block. The given operation may be owner by the caller or by its current block. The other operation must belong to a block. In any case, the ownership is transferred to the block of the other operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationPrint-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirOperationPrint","text":"mlirOperationPrint(op, callback, userData)\n\nPrints an operation by sending chunks of the string representation and forwarding userData tocallback`. Note that the callback may be called several times with consecutive chunks of the string.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationPrintWithFlags-NTuple{4, Any}","page":"API","title":"MLIR.API.mlirOperationPrintWithFlags","text":"mlirOperationPrintWithFlags(op, flags, callback, userData)\n\nSame as mlirOperationPrint but accepts flags controlling the printing behavior.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationRemoveAttributeByName-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirOperationRemoveAttributeByName","text":"mlirOperationRemoveAttributeByName(op, name)\n\nRemoves an attribute by name. Returns false if the attribute was not found and true if removed.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationRemoveFromParent-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationRemoveFromParent","text":"mlirOperationRemoveFromParent(op)\n\nRemoves the given operation from its parent block. The operation is not destroyed. The ownership of the operation is transferred to the caller.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationSetAttributeByName-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirOperationSetAttributeByName","text":"mlirOperationSetAttributeByName(op, name, attr)\n\nSets an attribute by name, replacing the existing if it exists or adding a new one otherwise.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationSetOperand-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirOperationSetOperand","text":"mlirOperationSetOperand(op, pos, newValue)\n\nSets the pos-th operand of the operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationStateAddResults-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirOperationStateAddResults","text":"mlirOperationStateAddResults(state, n, results)\n\nAdds a list of components to the operation state.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationStateEnableResultTypeInference-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationStateEnableResultTypeInference","text":"mlirOperationStateEnableResultTypeInference(state)\n\nEnables result type inference for the operation under construction. If enabled, then the caller must not have called mlirOperationStateAddResults(). Note that if enabled, the mlirOperationCreate() call is failable: it will return a null operation on inference failure and will emit diagnostics.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationStateGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirOperationStateGet","text":"mlirOperationStateGet(name, loc)\n\nConstructs an operation state from a name and a location.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirOperationVerify-Tuple{Any}","page":"API","title":"MLIR.API.mlirOperationVerify","text":"mlirOperationVerify(op)\n\nVerify the operation and return true if it passes, false if it fails.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirParsePassPipeline-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirParsePassPipeline","text":"mlirParsePassPipeline(passManager, pipeline)\n\nParse a textual MLIR pass pipeline and add it to the provided OpPassManager.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirPassManagerAddOwnedPass-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirPassManagerAddOwnedPass","text":"mlirPassManagerAddOwnedPass(passManager, pass)\n\nAdd a pass and transfer ownership to the provided top-level mlirPassManager. If the pass is not a generic operation pass or a ModulePass, a new OpPassManager is implicitly nested under the provided PassManager.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirPassManagerCreate-Tuple{Any}","page":"API","title":"MLIR.API.mlirPassManagerCreate","text":"mlirPassManagerCreate(ctx)\n\nCreate a new top-level PassManager.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirPassManagerDestroy-Tuple{Any}","page":"API","title":"MLIR.API.mlirPassManagerDestroy","text":"mlirPassManagerDestroy(passManager)\n\nDestroy the provided PassManager.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirPassManagerEnableIRPrinting-Tuple{Any}","page":"API","title":"MLIR.API.mlirPassManagerEnableIRPrinting","text":"mlirPassManagerEnableIRPrinting(passManager)\n\nEnable print-ir-after-all.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirPassManagerEnableVerifier-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirPassManagerEnableVerifier","text":"mlirPassManagerEnableVerifier(passManager, enable)\n\nEnable / disable verify-each.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirPassManagerGetAsOpPassManager-Tuple{Any}","page":"API","title":"MLIR.API.mlirPassManagerGetAsOpPassManager","text":"mlirPassManagerGetAsOpPassManager(passManager)\n\nCast a top-level PassManager to a generic OpPassManager.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirPassManagerGetNestedUnder-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirPassManagerGetNestedUnder","text":"mlirPassManagerGetNestedUnder(passManager, operationName)\n\nNest an OpPassManager under the top-level PassManager, the nested passmanager will only run on operations matching the provided name. The returned OpPassManager will be destroyed when the parent is destroyed. To further nest more OpPassManager under the newly returned one, see mlirOpPassManagerNest below.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirPassManagerIsNull-Tuple{Any}","page":"API","title":"MLIR.API.mlirPassManagerIsNull","text":"mlirPassManagerIsNull(passManager)\n\nChecks if a PassManager is null.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirPassManagerRun-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirPassManagerRun","text":"mlirPassManagerRun(passManager, _module)\n\nRun the provided passManager on the given module.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirPrintPassPipeline-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirPrintPassPipeline","text":"mlirPrintPassPipeline(passManager, callback, userData)\n\nPrint a textual MLIR pass pipeline by sending chunks of the string representation and forwarding userData tocallback`. Note that the callback may be called several times with consecutive chunks of the string.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirQuantizedTypeCastExpressedToStorageType-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirQuantizedTypeCastExpressedToStorageType","text":"mlirQuantizedTypeCastExpressedToStorageType(type, candidate)\n\nCasts from a type based on the expressed type of the given quantized type to equivalent type based on storage type of the same quantized type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirQuantizedTypeCastFromExpressedType-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirQuantizedTypeCastFromExpressedType","text":"mlirQuantizedTypeCastFromExpressedType(type, candidate)\n\nCasts from a type based on the expressed type of the given type to a corresponding type based on the given type. Returns a null type if the cast is not valid.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirQuantizedTypeCastFromStorageType-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirQuantizedTypeCastFromStorageType","text":"mlirQuantizedTypeCastFromStorageType(type, candidate)\n\nCasts from a type based on the storage type of the given type to a corresponding type based on the given type. Returns a null type if the cast is not valid.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirQuantizedTypeCastToExpressedType-Tuple{Any}","page":"API","title":"MLIR.API.mlirQuantizedTypeCastToExpressedType","text":"mlirQuantizedTypeCastToExpressedType(type)\n\nCasts from a type based on a quantized type to a corresponding typed based on the expressed type. Returns a null type if the cast is not valid.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirQuantizedTypeCastToStorageType-Tuple{Any}","page":"API","title":"MLIR.API.mlirQuantizedTypeCastToStorageType","text":"mlirQuantizedTypeCastToStorageType(type)\n\nCasts from a type based on a quantized type to a corresponding typed based on the storage type. Returns a null type if the cast is not valid.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirQuantizedTypeGetDefaultMaximumForInteger-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirQuantizedTypeGetDefaultMaximumForInteger","text":"mlirQuantizedTypeGetDefaultMaximumForInteger(isSigned, integralWidth)\n\nReturns the maximum possible value stored by a quantized type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirQuantizedTypeGetDefaultMinimumForInteger-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirQuantizedTypeGetDefaultMinimumForInteger","text":"mlirQuantizedTypeGetDefaultMinimumForInteger(isSigned, integralWidth)\n\nReturns the minimum possible value stored by a quantized type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirQuantizedTypeGetExpressedType-Tuple{Any}","page":"API","title":"MLIR.API.mlirQuantizedTypeGetExpressedType","text":"mlirQuantizedTypeGetExpressedType(type)\n\nGets the original type approximated by the given quantized type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirQuantizedTypeGetFlags-Tuple{Any}","page":"API","title":"MLIR.API.mlirQuantizedTypeGetFlags","text":"mlirQuantizedTypeGetFlags(type)\n\nGets the flags associated with the given quantized type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirQuantizedTypeGetQuantizedElementType-Tuple{Any}","page":"API","title":"MLIR.API.mlirQuantizedTypeGetQuantizedElementType","text":"mlirQuantizedTypeGetQuantizedElementType(type)\n\nReturns the element type of the given quantized type as another quantized type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirQuantizedTypeGetSignedFlag-Tuple{}","page":"API","title":"MLIR.API.mlirQuantizedTypeGetSignedFlag","text":"mlirQuantizedTypeGetSignedFlag()\n\nReturns the bit flag used to indicate signedness of a quantized type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirQuantizedTypeGetStorageType-Tuple{Any}","page":"API","title":"MLIR.API.mlirQuantizedTypeGetStorageType","text":"mlirQuantizedTypeGetStorageType(type)\n\nReturns the underlying type used to store the values.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirQuantizedTypeGetStorageTypeIntegralWidth-Tuple{Any}","page":"API","title":"MLIR.API.mlirQuantizedTypeGetStorageTypeIntegralWidth","text":"mlirQuantizedTypeGetStorageTypeIntegralWidth(type)\n\nReturns the integral bitwidth that the storage type of the given quantized type can represent exactly.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirQuantizedTypeGetStorageTypeMax-Tuple{Any}","page":"API","title":"MLIR.API.mlirQuantizedTypeGetStorageTypeMax","text":"mlirQuantizedTypeGetStorageTypeMax(type)\n\nReturns the maximum value that the storage type of the given quantized type can take.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirQuantizedTypeGetStorageTypeMin-Tuple{Any}","page":"API","title":"MLIR.API.mlirQuantizedTypeGetStorageTypeMin","text":"mlirQuantizedTypeGetStorageTypeMin(type)\n\nReturns the minimum value that the storage type of the given quantized type can take.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirQuantizedTypeIsCompatibleExpressedType-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirQuantizedTypeIsCompatibleExpressedType","text":"mlirQuantizedTypeIsCompatibleExpressedType(type, candidate)\n\nReturns true if the candidate type is compatible with the given quantized type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirQuantizedTypeIsSigned-Tuple{Any}","page":"API","title":"MLIR.API.mlirQuantizedTypeIsSigned","text":"mlirQuantizedTypeIsSigned(type)\n\nReturns true if the given type is signed, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirRankedTensorTypeGet-NTuple{4, Any}","page":"API","title":"MLIR.API.mlirRankedTensorTypeGet","text":"mlirRankedTensorTypeGet(rank, shape, elementType, encoding)\n\nCreates a tensor type of a fixed rank with the given shape, element type, and optional encoding in the same context as the element type. The type is owned by the context. Tensor types without any specific encoding field should assign mlirAttributeGetNull() to this parameter.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirRankedTensorTypeGetChecked-NTuple{5, Any}","page":"API","title":"MLIR.API.mlirRankedTensorTypeGetChecked","text":"mlirRankedTensorTypeGetChecked(loc, rank, shape, elementType, encoding)\n\nSame as \"mlirRankedTensorTypeGet\" but returns a nullptr wrapping MlirType on illegal arguments, emitting appropriate diagnostics.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirRankedTensorTypeGetEncoding-Tuple{Any}","page":"API","title":"MLIR.API.mlirRankedTensorTypeGetEncoding","text":"mlirRankedTensorTypeGetEncoding(type)\n\nGets the 'encoding' attribute from the ranked tensor type, returning a null attribute if none.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirRegionAppendOwnedBlock-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirRegionAppendOwnedBlock","text":"mlirRegionAppendOwnedBlock(region, block)\n\nTakes a block owned by the caller and appends it to the given region.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirRegionCreate-Tuple{}","page":"API","title":"MLIR.API.mlirRegionCreate","text":"mlirRegionCreate()\n\nCreates a new empty region and transfers ownership to the caller.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirRegionDestroy-Tuple{Any}","page":"API","title":"MLIR.API.mlirRegionDestroy","text":"mlirRegionDestroy(region)\n\nTakes a region owned by the caller and destroys it.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirRegionEqual-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirRegionEqual","text":"mlirRegionEqual(region, other)\n\nChecks whether two region handles point to the same region. This does not perform deep comparison.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirRegionGetFirstBlock-Tuple{Any}","page":"API","title":"MLIR.API.mlirRegionGetFirstBlock","text":"mlirRegionGetFirstBlock(region)\n\nGets the first block in the region.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirRegionGetNextInOperation-Tuple{Any}","page":"API","title":"MLIR.API.mlirRegionGetNextInOperation","text":"mlirRegionGetNextInOperation(region)\n\nReturns the region immediately following the given region in its parent operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirRegionInsertOwnedBlock-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirRegionInsertOwnedBlock","text":"mlirRegionInsertOwnedBlock(region, pos, block)\n\nTakes a block owned by the caller and inserts it at pos to the given region. This is an expensive operation that linearly scans the region, prefer insertAfter/Before instead.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirRegionInsertOwnedBlockAfter-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirRegionInsertOwnedBlockAfter","text":"mlirRegionInsertOwnedBlockAfter(region, reference, block)\n\nTakes a block owned by the caller and inserts it after the (non-owned) reference block in the given region. The reference block must belong to the region. If the reference block is null, prepends the block to the region.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirRegionInsertOwnedBlockBefore-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirRegionInsertOwnedBlockBefore","text":"mlirRegionInsertOwnedBlockBefore(region, reference, block)\n\nTakes a block owned by the caller and inserts it before the (non-owned) reference block in the given region. The reference block must belong to the region. If the reference block is null, appends the block to the region.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirRegionIsNull-Tuple{Any}","page":"API","title":"MLIR.API.mlirRegionIsNull","text":"mlirRegionIsNull(region)\n\nChecks whether a region is null.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirRegisterAllDialects-Tuple{Any}","page":"API","title":"MLIR.API.mlirRegisterAllDialects","text":"mlirRegisterAllDialects(context)\n\nRegisters all dialects known to core MLIR with the provided Context. This is needed before creating IR for these Dialects. TODO: Remove this function once the real registration API is finished.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirRegisterAllLLVMTranslations-Tuple{Any}","page":"API","title":"MLIR.API.mlirRegisterAllLLVMTranslations","text":"mlirRegisterAllLLVMTranslations(context)\n\nRegister all translations to LLVM IR for dialects that can support it.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirRegisterAllPasses-Tuple{}","page":"API","title":"MLIR.API.mlirRegisterAllPasses","text":"mlirRegisterAllPasses()\n\nRegister all compiler passes of MLIR.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirShapedTypeGetDimSize-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirShapedTypeGetDimSize","text":"mlirShapedTypeGetDimSize(type, dim)\n\nReturns the dim-th dimension of the given ranked shaped type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirShapedTypeGetElementType-Tuple{Any}","page":"API","title":"MLIR.API.mlirShapedTypeGetElementType","text":"mlirShapedTypeGetElementType(type)\n\nReturns the element type of the shaped type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirShapedTypeGetRank-Tuple{Any}","page":"API","title":"MLIR.API.mlirShapedTypeGetRank","text":"mlirShapedTypeGetRank(type)\n\nReturns the rank of the given ranked shaped type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirShapedTypeHasRank-Tuple{Any}","page":"API","title":"MLIR.API.mlirShapedTypeHasRank","text":"mlirShapedTypeHasRank(type)\n\nChecks whether the given shaped type is ranked.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirShapedTypeHasStaticShape-Tuple{Any}","page":"API","title":"MLIR.API.mlirShapedTypeHasStaticShape","text":"mlirShapedTypeHasStaticShape(type)\n\nChecks whether the given shaped type has a static shape.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirShapedTypeIsDynamicDim-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirShapedTypeIsDynamicDim","text":"mlirShapedTypeIsDynamicDim(type, dim)\n\nChecks wither the dim-th dimension of the given shaped type is dynamic.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirShapedTypeIsDynamicSize-Tuple{Any}","page":"API","title":"MLIR.API.mlirShapedTypeIsDynamicSize","text":"mlirShapedTypeIsDynamicSize(size)\n\nChecks whether the given value is used as a placeholder for dynamic sizes in shaped types.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirShapedTypeIsDynamicStrideOrOffset-Tuple{Any}","page":"API","title":"MLIR.API.mlirShapedTypeIsDynamicStrideOrOffset","text":"mlirShapedTypeIsDynamicStrideOrOffset(val)\n\nChecks whether the given value is used as a placeholder for dynamic strides and offsets in shaped types.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSparseElementsAttrGetIndices-Tuple{Any}","page":"API","title":"MLIR.API.mlirSparseElementsAttrGetIndices","text":"mlirSparseElementsAttrGetIndices(attr)\n\nReturns the dense elements attribute containing 64-bit integer indices of non-null elements in the given sparse elements attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSparseElementsAttrGetValues-Tuple{Any}","page":"API","title":"MLIR.API.mlirSparseElementsAttrGetValues","text":"mlirSparseElementsAttrGetValues(attr)\n\nReturns the dense elements attribute containing the non-null elements in the given sparse elements attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSparseElementsAttribute-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirSparseElementsAttribute","text":"mlirSparseElementsAttribute(shapedType, denseIndices, denseValues)\n\nCreates a sparse elements attribute of the given shape from a list of indices and a list of associated values. Both lists are expected to be dense elements attributes with the same number of elements. The list of indices is expected to contain 64-bit integers. The attribute is created in the same context as the type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSparseTensorEncodingAttrGet-NTuple{6, Any}","page":"API","title":"MLIR.API.mlirSparseTensorEncodingAttrGet","text":"mlirSparseTensorEncodingAttrGet(ctx, numDimLevelTypes, dimLevelTypes, dimOrdering, pointerBitWidth, indexBitWidth)\n\nCreates a sparse_tensor.encoding attribute with the given parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSparseTensorEncodingAttrGetDimLevelType-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirSparseTensorEncodingAttrGetDimLevelType","text":"mlirSparseTensorEncodingAttrGetDimLevelType(attr, pos)\n\nReturns a specified dim level type in a sparse_tensor.encoding attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSparseTensorEncodingAttrGetDimOrdering-Tuple{Any}","page":"API","title":"MLIR.API.mlirSparseTensorEncodingAttrGetDimOrdering","text":"mlirSparseTensorEncodingAttrGetDimOrdering(attr)\n\nReturns the dimension ordering in a sparse_tensor.encoding attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSparseTensorEncodingAttrGetIndexBitWidth-Tuple{Any}","page":"API","title":"MLIR.API.mlirSparseTensorEncodingAttrGetIndexBitWidth","text":"mlirSparseTensorEncodingAttrGetIndexBitWidth(attr)\n\nReturns the index bit width in a sparse_tensor.encoding attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSparseTensorEncodingAttrGetPointerBitWidth-Tuple{Any}","page":"API","title":"MLIR.API.mlirSparseTensorEncodingAttrGetPointerBitWidth","text":"mlirSparseTensorEncodingAttrGetPointerBitWidth(attr)\n\nReturns the pointer bit width in a sparse_tensor.encoding attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSparseTensorEncodingGetNumDimLevelTypes-Tuple{Any}","page":"API","title":"MLIR.API.mlirSparseTensorEncodingGetNumDimLevelTypes","text":"mlirSparseTensorEncodingGetNumDimLevelTypes(attr)\n\nReturns the number of dim level types in a sparse_tensor.encoding attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirStringAttrGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirStringAttrGet","text":"mlirStringAttrGet(ctx, str)\n\nCreates a string attribute in the given context containing the given string.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirStringAttrGetValue-Tuple{Any}","page":"API","title":"MLIR.API.mlirStringAttrGetValue","text":"mlirStringAttrGetValue(attr)\n\nReturns the attribute values as a string reference. The data remains live as long as the context in which the attribute lives.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirStringAttrTypedGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirStringAttrTypedGet","text":"mlirStringAttrTypedGet(type, str)\n\nCreates a string attribute in the given context containing the given string. Additionally, the attribute has the given type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirStringRefCreate-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirStringRefCreate","text":"mlirStringRefCreate(str, length)\n\nConstructs a string reference from the pointer and length. The pointer need not reference to a null-terminated string.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirStringRefCreateFromCString-Tuple{Any}","page":"API","title":"MLIR.API.mlirStringRefCreateFromCString","text":"mlirStringRefCreateFromCString(str)\n\nConstructs a string reference from a null-terminated C string. Prefer mlirStringRefCreate if the length of the string is known.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirStringRefEqual-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirStringRefEqual","text":"mlirStringRefEqual(string, other)\n\nReturns true if two string references are equal, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSymbolRefAttrGet-NTuple{4, Any}","page":"API","title":"MLIR.API.mlirSymbolRefAttrGet","text":"mlirSymbolRefAttrGet(ctx, symbol, numReferences, references)\n\nCreates a symbol reference attribute in the given context referencing a symbol identified by the given string inside a list of nested references. Each of the references in the list must not be nested.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSymbolRefAttrGetLeafReference-Tuple{Any}","page":"API","title":"MLIR.API.mlirSymbolRefAttrGetLeafReference","text":"mlirSymbolRefAttrGetLeafReference(attr)\n\nReturns the string reference to the leaf referenced symbol. The data remains live as long as the context in which the attribute lives.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSymbolRefAttrGetNestedReference-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirSymbolRefAttrGetNestedReference","text":"mlirSymbolRefAttrGetNestedReference(attr, pos)\n\nReturns pos-th reference nested in the given symbol reference attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSymbolRefAttrGetNumNestedReferences-Tuple{Any}","page":"API","title":"MLIR.API.mlirSymbolRefAttrGetNumNestedReferences","text":"mlirSymbolRefAttrGetNumNestedReferences(attr)\n\nReturns the number of references nested in the given symbol reference attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSymbolRefAttrGetRootReference-Tuple{Any}","page":"API","title":"MLIR.API.mlirSymbolRefAttrGetRootReference","text":"mlirSymbolRefAttrGetRootReference(attr)\n\nReturns the string reference to the root referenced symbol. The data remains live as long as the context in which the attribute lives.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSymbolTableCreate-Tuple{Any}","page":"API","title":"MLIR.API.mlirSymbolTableCreate","text":"mlirSymbolTableCreate(operation)\n\nCreates a symbol table for the given operation. If the operation does not have the SymbolTable trait, returns a null symbol table.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSymbolTableDestroy-Tuple{Any}","page":"API","title":"MLIR.API.mlirSymbolTableDestroy","text":"mlirSymbolTableDestroy(symbolTable)\n\nDestroys the symbol table created with mlirSymbolTableCreate. This does not affect the operations in the table.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSymbolTableErase-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirSymbolTableErase","text":"mlirSymbolTableErase(symbolTable, operation)\n\nRemoves the given operation from the symbol table and erases it.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSymbolTableGetSymbolAttributeName-Tuple{}","page":"API","title":"MLIR.API.mlirSymbolTableGetSymbolAttributeName","text":"mlirSymbolTableGetSymbolAttributeName()\n\nReturns the name of the attribute used to store symbol names compatible with symbol tables.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSymbolTableGetVisibilityAttributeName-Tuple{}","page":"API","title":"MLIR.API.mlirSymbolTableGetVisibilityAttributeName","text":"mlirSymbolTableGetVisibilityAttributeName()\n\nReturns the name of the attribute used to store symbol visibility.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSymbolTableInsert-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirSymbolTableInsert","text":"mlirSymbolTableInsert(symbolTable, operation)\n\nInserts the given operation into the given symbol table. The operation must have the symbol trait. If the symbol table already has a symbol with the same name, renames the symbol being inserted to ensure name uniqueness. Note that this does not move the operation itself into the block of the symbol table operation, this should be done separately. Returns the name of the symbol after insertion.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSymbolTableIsNull-Tuple{Any}","page":"API","title":"MLIR.API.mlirSymbolTableIsNull","text":"mlirSymbolTableIsNull(symbolTable)\n\nReturns true if the symbol table is null.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSymbolTableLookup-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirSymbolTableLookup","text":"mlirSymbolTableLookup(symbolTable, name)\n\nLooks up a symbol with the given name in the given symbol table and returns the operation that corresponds to the symbol. If the symbol cannot be found, returns a null operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSymbolTableReplaceAllSymbolUses-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirSymbolTableReplaceAllSymbolUses","text":"mlirSymbolTableReplaceAllSymbolUses(oldSymbol, newSymbol, from)\n\nAttempt to replace all uses that are nested within the given operation of the given symbol 'oldSymbol' with the provided 'newSymbol'. This does not traverse into nested symbol tables. Will fail atomically if there are any unknown operations that may be potential symbol tables.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirSymbolTableWalkSymbolTables-NTuple{4, Any}","page":"API","title":"MLIR.API.mlirSymbolTableWalkSymbolTables","text":"mlirSymbolTableWalkSymbolTables(from, allSymUsesVisible, callback, userData)\n\nWalks all symbol table operations nested within, and including, op. For each symbol table operation, the provided callback is invoked with the op and a boolean signifying if the symbols within that symbol table can be treated as if all uses within the IR are visible to the caller. allSymUsesVisible identifies whether all of the symbol uses of symbols within op are visible.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTupleTypeGet-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirTupleTypeGet","text":"mlirTupleTypeGet(ctx, numElements, elements)\n\nCreates a tuple type that consists of the given list of elemental types. The type is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTupleTypeGetNumTypes-Tuple{Any}","page":"API","title":"MLIR.API.mlirTupleTypeGetNumTypes","text":"mlirTupleTypeGetNumTypes(type)\n\nReturns the number of types contained in a tuple.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTupleTypeGetType-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirTupleTypeGetType","text":"mlirTupleTypeGetType(type, pos)\n\nReturns the pos-th type in the tuple type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeAttrGet-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeAttrGet","text":"mlirTypeAttrGet(type)\n\nCreates a type attribute wrapping the given type in the same context as the type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeAttrGetValue-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeAttrGetValue","text":"mlirTypeAttrGetValue(attr)\n\nReturns the type stored in the given type attribute.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeDump-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeDump","text":"mlirTypeDump(type)\n\nPrints the type to the standard error stream.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeEqual-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirTypeEqual","text":"mlirTypeEqual(t1, t2)\n\nChecks if two types are equal.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeGetContext-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeGetContext","text":"mlirTypeGetContext(type)\n\nGets the context that a type was created with.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeGetTypeID-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeGetTypeID","text":"mlirTypeGetTypeID(type)\n\nGets the type ID of the type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIDEqual-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirTypeIDEqual","text":"mlirTypeIDEqual(typeID1, typeID2)\n\nChecks if two type ids are equal.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIDHashValue-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIDHashValue","text":"mlirTypeIDHashValue(typeID)\n\nReturns the hash value of the type id.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIDIsNull-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIDIsNull","text":"mlirTypeIDIsNull(typeID)\n\nChecks whether a type id is null.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsAAnyQuantizedType-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsAAnyQuantizedType","text":"mlirTypeIsAAnyQuantizedType(type)\n\nReturns true if the given type is an AnyQuantizedType.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsABF16-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsABF16","text":"mlirTypeIsABF16(type)\n\nChecks whether the given type is a bf16 type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsACalibratedQuantizedType-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsACalibratedQuantizedType","text":"mlirTypeIsACalibratedQuantizedType(type)\n\nReturns true if the given type is a CalibratedQuantizedType.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsAComplex-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsAComplex","text":"mlirTypeIsAComplex(type)\n\nChecks whether the given type is a Complex type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsAF16-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsAF16","text":"mlirTypeIsAF16(type)\n\nChecks whether the given type is an f16 type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsAF32-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsAF32","text":"mlirTypeIsAF32(type)\n\nChecks whether the given type is an f32 type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsAF64-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsAF64","text":"mlirTypeIsAF64(type)\n\nChecks whether the given type is an f64 type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsAFunction-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsAFunction","text":"mlirTypeIsAFunction(type)\n\nChecks whether the given type is a function type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsAIndex-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsAIndex","text":"mlirTypeIsAIndex(type)\n\nChecks whether the given type is an index type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsAInteger-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsAInteger","text":"mlirTypeIsAInteger(type)\n\nChecks whether the given type is an integer type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsAMemRef-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsAMemRef","text":"mlirTypeIsAMemRef(type)\n\nChecks whether the given type is a MemRef type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsANone-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsANone","text":"mlirTypeIsANone(type)\n\nChecks whether the given type is a None type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsAQuantizedType-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsAQuantizedType","text":"mlirTypeIsAQuantizedType(type)\n\nReturns true if the given type is a quantization dialect type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsARankedTensor-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsARankedTensor","text":"mlirTypeIsARankedTensor(type)\n\nChecks whether the given type is a ranked tensor type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsAShaped-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsAShaped","text":"mlirTypeIsAShaped(type)\n\nChecks whether the given type is a Shaped type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsATensor-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsATensor","text":"mlirTypeIsATensor(type)\n\nChecks whether the given type is a Tensor type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsATuple-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsATuple","text":"mlirTypeIsATuple(type)\n\nChecks whether the given type is a tuple type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsAUniformQuantizedPerAxisType-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsAUniformQuantizedPerAxisType","text":"mlirTypeIsAUniformQuantizedPerAxisType(type)\n\nReturns true if the given type is a UniformQuantizedPerAxisType.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsAUniformQuantizedType-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsAUniformQuantizedType","text":"mlirTypeIsAUniformQuantizedType(type)\n\nReturns true if the given type is a UniformQuantizedType.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsAUnrankedMemRef-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsAUnrankedMemRef","text":"mlirTypeIsAUnrankedMemRef(type)\n\nChecks whether the given type is an UnrankedMemRef type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsAUnrankedTensor-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsAUnrankedTensor","text":"mlirTypeIsAUnrankedTensor(type)\n\nChecks whether the given type is an unranked tensor type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsAVector-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsAVector","text":"mlirTypeIsAVector(type)\n\nChecks whether the given type is a Vector type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeIsNull-Tuple{Any}","page":"API","title":"MLIR.API.mlirTypeIsNull","text":"mlirTypeIsNull(type)\n\nChecks whether a type is null.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypeParseGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirTypeParseGet","text":"mlirTypeParseGet(context, type)\n\nParses a type. The type is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirTypePrint-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirTypePrint","text":"mlirTypePrint(type, callback, userData)\n\nPrints a location by sending chunks of the string representation and forwarding userData tocallback`. Note that the callback may be called several times with consecutive chunks of the string.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirUniformQuantizedPerAxisTypeGet-NTuple{9, Any}","page":"API","title":"MLIR.API.mlirUniformQuantizedPerAxisTypeGet","text":"mlirUniformQuantizedPerAxisTypeGet(flags, storageType, expressedType, nDims, scales, zeroPoints, quantizedDimension, storageTypeMin, storageTypeMax)\n\nCreates an instance of UniformQuantizedPerAxisType with the given parameters in the same context as storageType and returns it. scales and zeroPoints point to nDims number of elements. The instance is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirUniformQuantizedPerAxisTypeGetNumDims-Tuple{Any}","page":"API","title":"MLIR.API.mlirUniformQuantizedPerAxisTypeGetNumDims","text":"mlirUniformQuantizedPerAxisTypeGetNumDims(type)\n\nReturns the number of axes in the given quantized per-axis type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirUniformQuantizedPerAxisTypeGetQuantizedDimension-Tuple{Any}","page":"API","title":"MLIR.API.mlirUniformQuantizedPerAxisTypeGetQuantizedDimension","text":"mlirUniformQuantizedPerAxisTypeGetQuantizedDimension(type)\n\nReturns the index of the quantized dimension in the given quantized per-axis type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirUniformQuantizedPerAxisTypeGetScale-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirUniformQuantizedPerAxisTypeGetScale","text":"mlirUniformQuantizedPerAxisTypeGetScale(type, pos)\n\nReturns pos-th scale of the given quantized per-axis type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirUniformQuantizedPerAxisTypeGetZeroPoint-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirUniformQuantizedPerAxisTypeGetZeroPoint","text":"mlirUniformQuantizedPerAxisTypeGetZeroPoint(type, pos)\n\nReturns pos-th zero point of the given quantized per-axis type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirUniformQuantizedPerAxisTypeIsFixedPoint-Tuple{Any}","page":"API","title":"MLIR.API.mlirUniformQuantizedPerAxisTypeIsFixedPoint","text":"mlirUniformQuantizedPerAxisTypeIsFixedPoint(type)\n\nReturns true if the given uniform quantized per-axis type is fixed-point.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirUniformQuantizedTypeGet-NTuple{7, Any}","page":"API","title":"MLIR.API.mlirUniformQuantizedTypeGet","text":"mlirUniformQuantizedTypeGet(flags, storageType, expressedType, scale, zeroPoint, storageTypeMin, storageTypeMax)\n\nCreates an instance of UniformQuantizedType with the given parameters in the same context as storageType and returns it. The instance is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirUniformQuantizedTypeGetScale-Tuple{Any}","page":"API","title":"MLIR.API.mlirUniformQuantizedTypeGetScale","text":"mlirUniformQuantizedTypeGetScale(type)\n\nReturns the scale of the given uniform quantized type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirUniformQuantizedTypeGetZeroPoint-Tuple{Any}","page":"API","title":"MLIR.API.mlirUniformQuantizedTypeGetZeroPoint","text":"mlirUniformQuantizedTypeGetZeroPoint(type)\n\nReturns the zero point of the given uniform quantized type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirUniformQuantizedTypeIsFixedPoint-Tuple{Any}","page":"API","title":"MLIR.API.mlirUniformQuantizedTypeIsFixedPoint","text":"mlirUniformQuantizedTypeIsFixedPoint(type)\n\nReturns true if the given uniform quantized type is fixed-point.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirUnitAttrGet-Tuple{Any}","page":"API","title":"MLIR.API.mlirUnitAttrGet","text":"mlirUnitAttrGet(ctx)\n\nCreates a unit attribute in the given context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirUnrankedMemRefTypeGet-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirUnrankedMemRefTypeGet","text":"mlirUnrankedMemRefTypeGet(elementType, memorySpace)\n\nCreates an Unranked MemRef type with the given element type and in the given memory space. The type is owned by the context of element type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirUnrankedMemRefTypeGetChecked-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirUnrankedMemRefTypeGetChecked","text":"mlirUnrankedMemRefTypeGetChecked(loc, elementType, memorySpace)\n\nSame as \"mlirUnrankedMemRefTypeGet\" but returns a nullptr wrapping MlirType on illegal arguments, emitting appropriate diagnostics.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirUnrankedMemrefGetMemorySpace-Tuple{Any}","page":"API","title":"MLIR.API.mlirUnrankedMemrefGetMemorySpace","text":"mlirUnrankedMemrefGetMemorySpace(type)\n\nReturns the memory spcae of the given Unranked MemRef type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirUnrankedTensorTypeGet-Tuple{Any}","page":"API","title":"MLIR.API.mlirUnrankedTensorTypeGet","text":"mlirUnrankedTensorTypeGet(elementType)\n\nCreates an unranked tensor type with the given element type in the same context as the element type. The type is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirUnrankedTensorTypeGetChecked-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirUnrankedTensorTypeGetChecked","text":"mlirUnrankedTensorTypeGetChecked(loc, elementType)\n\nSame as \"mlirUnrankedTensorTypeGet\" but returns a nullptr wrapping MlirType on illegal arguments, emitting appropriate diagnostics.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirValueDump-Tuple{Any}","page":"API","title":"MLIR.API.mlirValueDump","text":"mlirValueDump(value)\n\nPrints the value to the standard error stream.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirValueEqual-Tuple{Any, Any}","page":"API","title":"MLIR.API.mlirValueEqual","text":"mlirValueEqual(value1, value2)\n\nReturns 1 if two values are equal, 0 otherwise.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirValueGetType-Tuple{Any}","page":"API","title":"MLIR.API.mlirValueGetType","text":"mlirValueGetType(value)\n\nReturns the type of the value.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirValueIsABlockArgument-Tuple{Any}","page":"API","title":"MLIR.API.mlirValueIsABlockArgument","text":"mlirValueIsABlockArgument(value)\n\nReturns 1 if the value is a block argument, 0 otherwise.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirValueIsAOpResult-Tuple{Any}","page":"API","title":"MLIR.API.mlirValueIsAOpResult","text":"mlirValueIsAOpResult(value)\n\nReturns 1 if the value is an operation result, 0 otherwise.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirValueIsNull-Tuple{Any}","page":"API","title":"MLIR.API.mlirValueIsNull","text":"mlirValueIsNull(value)\n\nReturns whether the value is null.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirValuePrint-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirValuePrint","text":"mlirValuePrint(value, callback, userData)\n\nPrints a value by sending chunks of the string representation and forwarding userData tocallback`. Note that the callback may be called several times with consecutive chunks of the string.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirVectorTypeGet-Tuple{Any, Any, Any}","page":"API","title":"MLIR.API.mlirVectorTypeGet","text":"mlirVectorTypeGet(rank, shape, elementType)\n\nCreates a vector type of the shape identified by its rank and dimensions, with the given element type in the same context as the element type. The type is owned by the context.\n\n\n\n\n\n","category":"method"},{"location":"api/#MLIR.API.mlirVectorTypeGetChecked-NTuple{4, Any}","page":"API","title":"MLIR.API.mlirVectorTypeGetChecked","text":"mlirVectorTypeGetChecked(loc, rank, shape, elementType)\n\nSame as \"mlirVectorTypeGet\" but returns a nullptr wrapping MlirType on illegal arguments, emitting appropriate diagnostics.\n\n\n\n\n\n","category":"method"},{"location":"#MLIR.jl","page":"Home","title":"MLIR.jl","text":"","category":"section"},{"location":"#Design","page":"Home","title":"Design","text":"","category":"section"},{"location":"#String-and-MlirStringRef.","page":"Home","title":"String and MlirStringRef.","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MlirStringRef is a non-owning pointer, the caller is in charge of performing necessary copies or ensuring that the pointee outlives all uses of MlirStringRef. Since Julia is a GC'd language special care must be taken around the live-time of Julia objects such as Strings when interacting with foreign libraries.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For convenience and safty sake, users of the API should use Julia String or Symbol as the argument to the C-ABI of MLIR instead of directly using MlirStringRef. We translate (cheaply) between Julia String and MlirStringRef.","category":"page"}]
}
